name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPO: ubiquia
  SUBPROJECTS: |
    core/service/belief-state-generator-service
    core/service/communication-service
    core/service/flow-service
    test/service/belief-state-generator-service-test

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.versions.outputs.ubiquia_version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradle permissions
        run: chmod +x ./gradlew

      - name: Load versions
        id: versions
        run: |
          OPENJDK_VERSION=$(grep '^OPENJDK_VERSION=' gradle.properties | cut -d'=' -f2)
          UBIQUIA_VERSION=$(grep '^version:' helm/Chart.yaml | head -n 1 | awk '{print $2}')
          echo "OPENJDK_VERSION=$OPENJDK_VERSION" >> $GITHUB_ENV
          echo "ubiquia_version=$UBIQUIA_VERSION" >> $GITHUB_OUTPUT

      - name: Build all JARs
        run: ./gradlew clean build

      - name: Build Docker images
        run: |
          mkdir -p docker-images
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REPO}/${project_name}
            echo "Building image for $dir -> $IMAGE_NAME:${{ steps.versions.outputs.ubiquia_version }}"
            docker build \
              --build-arg OPENJDK_VERSION=${OPENJDK_VERSION} \
              -t $IMAGE_NAME:${{ steps.versions.outputs.ubiquia_version }} $dir
            docker save -o docker-images/${project_name}.tar $IMAGE_NAME:${{ steps.versions.outputs.ubiquia_version }}
          done

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images

  helm-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Kubernetes with KinD
        uses: helm/kind-action@v1.5.0

      - name: Ensure KinD cluster exists
        run: |
          kind get clusters | grep -q "^ubiquia-agent-0$" || kind create cluster --name ubiquia-agent-0

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Create namespace
        run: |
          kubectl create namespace ubiquia || echo "Namespace 'ubiquia' already exists"

      - name: Apply supporting manifests (RBAC and PV)
        run: |
          kubectl apply -f config/dev/ubiquia_dev_service_account.yaml -n ubiquia
          kubectl apply -f config/dev/ubiquia_dev_kind_pv.yaml -n ubiquia

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker images into Docker and KinD
        run: |
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REPO}/${project_name}
            echo "Loading docker image from docker-images/${project_name}.tar"
            docker load -i docker-images/${project_name}.tar
            docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:latest
            kind load docker-image --name ubiquia-agent-0 $IMAGE_NAME:${{ needs.build.outputs.image_tag }}
          done

      - name: List local Docker images
        run: |
          echo "=== Local Docker images ==="
          docker images

      - name: List Docker images loaded into KinD node
        run: |
          echo "=== Docker images in KinD node ==="
          docker exec "$(docker ps -q -f name=ubiquia-agent-0-control-plane)" crictl images

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add yugabytedb https://charts.yugabyte.com
          helm repo update

      - name: Build Helm chart dependencies
        run: |
          helm dependency build helm/

      - name: Deploy Helm chart
        run: |
          helm install ubiquia helm/ --values helm/configurations/dev/featherweight-dev.yaml -n ubiquia

      - name: Wait for Flow Service to become ready
        run: |
          echo "Waiting for ubiquia-core-flow-service to be ready..."
          for i in {1..30}; do
            if kubectl get pods -n ubiquia -l app.kubernetes.io/component=core-flow-service | grep -q Running; then
              echo "Flow service pod is running."
              break
            fi
            echo "Still waiting... ($i)"
            sleep 5
          done
          echo "Giving it a few extra seconds just in case..."
          sleep 10

      - name: Run Helm tests
        run: |
          helm test ubiquia --logs -n ubiquia

  push-images:
    needs: [build, helm-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load and push Docker images
        run: |
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REPO}/${project_name}
            echo "Loading and pushing image: $IMAGE_NAME:${{ needs.build.outputs.image_tag }}"
            docker load -i docker-images/${project_name}.tar
            docker push $IMAGE_NAME:${{ needs.build.outputs.image_tag }}

            # Optional: also push 'latest' tag
            docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:latest
            docker push $IMAGE_NAME:latest
