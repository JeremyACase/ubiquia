name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  DOCKER_REPO: ubiquia
  SUBPROJECTS: |
    services/core/java/core-belief-state-generator-service
    services/core/java/core-communication-service
    services/core/java/core-flow-service
    services/dag/workbench/ts/dag-workbench-ui
    services/test/java/test-belief-state-generator-service
    services/test/java/test-flow-service

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      chart_version: ${{ steps.chart.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradle permissions
        run: chmod +x ./gradlew

      - name: Load OPENJDK_VERSION and CHART_VERSION
        id: chart
        run: |
          OPENJDK_VERSION=$(grep '^OPENJDK_VERSION=' gradle.properties | cut -d'=' -f2)
          CHART_VERSION=$(grep '^version:' helm/Chart.yaml | head -n1 | awk '{print $2}')
          echo "OPENJDK_VERSION=$OPENJDK_VERSION" >> $GITHUB_ENV
          echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT

      - name: Build all JARs
        run: ./gradlew clean build

      - name: uv version (diagnostic)
        run: uv --version

      - name: Build Docker images (tagged as latest)
        run: |
          mkdir -p docker-images
          IFS=$'\n'

          # detect whether this is a tag build like v1.2.3
          IS_TAG_BUILD=false
          VERSION_TAG=""
          if [[ "${GITHUB_REF_TYPE}" == "tag" && "${GITHUB_REF_NAME}" =~ ^v[0-9] ]]; then
            IS_TAG_BUILD=true
            VERSION_TAG="${GITHUB_REF_NAME#v}"
          fi

          for dir in $SUBPROJECTS; do
            project_name=$(basename "$dir")
            IMAGE_NAME="${DOCKER_REPO}/${project_name}"

            echo "----"
            echo "Building $dir  ->  ${IMAGE_NAME}:latest"

            # Special-case the UI subproject: build with APP_BASE_PATH (Angular/NGINX image)
            if [[ "$dir" == *"/dag-workbench-ui" ]]; then
              docker build \
                --build-arg APP_BASE_PATH="/" \
                -t "${IMAGE_NAME}:latest" "$dir"
            else
              # Default: Java services use OPENJDK_VERSION build arg
              docker build \
                --build-arg OPENJDK_VERSION="${OPENJDK_VERSION}" \
                -t "${IMAGE_NAME}:latest" "$dir"
            fi

            # Save latest tar for artifact
            docker save -o "docker-images/${project_name}.tar" "${IMAGE_NAME}:latest"

            # If tag build, also tag + save versioned tar
            if $IS_TAG_BUILD ; then
              echo "Tagging ${IMAGE_NAME}:${VERSION_TAG}"
              docker tag "${IMAGE_NAME}:latest" "${IMAGE_NAME}:${VERSION_TAG}"
              docker save -o "docker-images/${project_name}-${VERSION_TAG}.tar" "${IMAGE_NAME}:${VERSION_TAG}"
            fi
          done

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images

  helm-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Kubernetes with KinD
        uses: helm/kind-action@v1.5.0

      - name: Ensure KinD cluster exists
        run: |
          kind get clusters | grep -q "^ubiquia-agent-0$" || kind create cluster --name ubiquia-agent-0

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Create shared belief state mount inside KinD node
        run: |
          docker exec ubiquia-agent-0-control-plane mkdir -p /mnt/data/belief-state-jars

      - name: Create namespace
        run: |
          kubectl create namespace ubiquia || echo "Namespace 'ubiquia' already exists"

      - name: Apply supporting manifests (RBAC and PV)
        run: |
          kubectl apply -f deploy/config/test/ubiquia_test_service_account.yaml -n ubiquia
          kubectl apply -f deploy/config/test/ubiquia_test_kind_pv.yaml -n ubiquia

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker images into Docker and KinD (tagged as latest)
        run: |
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=$(basename $dir)
            IMAGE_NAME=${DOCKER_REPO}/${project_name}
            echo "Loading docker image from docker-images/${project_name}.tar"
            docker load -i docker-images/${project_name}.tar
            kind load docker-image --name ubiquia-agent-0 $IMAGE_NAME:latest
          done

      - name: List Docker images loaded into KinD node
        run: |
          echo "=== Docker images in KinD node ==="
          docker exec "$(docker ps -q -f name=ubiquia-agent-0-control-plane)" crictl images

      - name: Add Helm repositories
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add yugabytedb https://charts.yugabyte.com
          helm repo update

      - name: Build Helm chart dependencies
        run: |
          helm dependency build deploy/helm/

      - name: Deploy Helm chart (images tagged as latest)
        run: |
          helm install ubiquia helm/ --values deploy/helm/configurations/test/build-pipeline.yaml -n ubiquia

      - name: Inspect resources before Helm test
        run: |
          echo "Sleeping to allow resources to settle..."
          sleep 60
          echo "=== Pods ==="
          kubectl get pods -n ubiquia -o wide
          echo "=== Services ==="
          kubectl get svc -n ubiquia
          echo "=== ConfigMaps ==="
          kubectl get configmaps -n ubiquia

      - name: Run Helm tests
        run: |
          helm test ubiquia --logs -n ubiquia

      - name: Inspect resources after Helm test
        if: always()
        run: |
          echo "=== Pods ==="
          kubectl get pods -n ubiquia -o wide
          echo "=== Services ==="
          kubectl get svc -n ubiquia
          echo "=== ConfigMaps ==="
          kubectl get configmaps -n ubiquia

      - name: Dump logs from all pods in ubiquia namespace
        if: always()
        run: |
          echo "Getting logs from all pods in namespace 'ubiquia'..."
          for pod in $(kubectl get pods -n ubiquia --no-headers -o custom-columns=":metadata.name"); do
            echo "=============================="
            echo "Logs for pod: $pod"
            echo "=============================="
            kubectl logs -n ubiquia "$pod" || echo "Failed to get logs for $pod"
            echo ""
          done

  push-images:
    needs: [build, helm-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load and push Docker images (tagged as latest + chart version)
        run: |
          VERSION=${{ needs.build.outputs.chart_version }}
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=$(basename $dir)
            IMAGE_NAME=${DOCKER_REPO}/${project_name}

            echo "Loading image from docker-images/${project_name}.tar"
            docker load -i docker-images/${project_name}.tar

            echo "Tagging and pushing $IMAGE_NAME:$VERSION and $IMAGE_NAME:latest"
            docker tag $IMAGE_NAME:latest docker.io/$IMAGE_NAME:$VERSION
            docker push docker.io/$IMAGE_NAME:$VERSION

            docker tag $IMAGE_NAME:latest docker.io/$IMAGE_NAME:latest
            docker push docker.io/$IMAGE_NAME:latest
          done
