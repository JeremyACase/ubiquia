name: Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPO: ubiquia
  SUBPROJECTS: |
    core/service/belief-state-generator-service
    core/service/communication-service
    core/service/flow-service
    test/service/belief-state-generator-service-test

jobs:

  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Gradle permissions
        run: chmod +x ./gradlew

      - name: Load OPENJDK_VERSION from gradle.properties
        run: |
          export OPENJDK_VERSION=$(grep '^OPENJDK_VERSION=' gradle.properties | cut -d'=' -f2)
          echo "OPENJDK_VERSION=$OPENJDK_VERSION" >> $GITHUB_ENV

      - name: Determine image tag
        id: image_tag
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build all JARs
        run: ./gradlew clean build

      - name: Build Docker images
        run: |
          mkdir -p docker-images
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REGISTRY}/${DOCKER_REPO}/${project_name}
            echo "Building image for $dir -> $IMAGE_NAME:${{ steps.image_tag.outputs.tag }}"
            docker build \
              --build-arg OPENJDK_VERSION=${OPENJDK_VERSION} \
              -t $IMAGE_NAME:${{ steps.image_tag.outputs.tag }} $dir
            docker save -o docker-images/${project_name}.tar $IMAGE_NAME:${{ steps.image_tag.outputs.tag }}
          done

      - name: Upload Docker images as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images


  helm-test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Kubernetes with KinD
        uses: helm/kind-action@v1.5.0

      - name: Set up Helm
        uses: azure/setup-helm@v3

      - name: Create namespace
        run: |
          kubectl create namespace ubiquia || echo "Namespace 'ubiquia' already exists"

      - name: Apply supporting manifests (RBAC and PV)
        run: |
          kubectl apply -f config/dev/ubiquia_dev_service_account.yaml -n ubiquia
          kubectl apply -f config/dev/ubiquia_dev_kind_pv.yaml -n ubiquia

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load Docker images into Docker and KinD
        run: |
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REGISTRY}/${DOCKER_REPO}/${project_name}
            echo "Loading docker image from docker-images/${project_name}.tar"
            docker load -i docker-images/${project_name}.tar
            docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:temp
            kind load docker-image $IMAGE_NAME:temp
          done

      - name: Deploy Helm chart
        run: |
          helm upgrade --install ubiquia ./charts/ubiquia \
            --set image.tag=temp \
            --wait --timeout 300s \
            -n ubiquia

      - name: Run Helm tests
        run: |
          helm test ubiquia --logs -n ubiquia


  push-images:
    needs: [build, helm-test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Download Docker image artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker-images

      - name: Load and push Docker images
        run: |
          IFS=$'\n'
          for dir in $SUBPROJECTS; do
            project_name=core-$(basename $dir)
            IMAGE_NAME=${DOCKER_REGISTRY}/${DOCKER_REPO}/${project_name}
            echo "Loading and pushing image: $IMAGE_NAME:${{ needs.build.outputs.image_tag }}"
            docker load -i docker-images/${project_name}.tar
            docker push $IMAGE_NAME:${{ needs.build.outputs.image_tag }}

            if [[ "${{ needs.build.outputs.image_tag }}" != "latest" ]]; then
              docker tag $IMAGE_NAME:${{ needs.build.outputs.image_tag }} $IMAGE_NAME:latest
              docker push $IMAGE_NAME:latest
            fi
          done
