name: pets
modelType: Graph
author: Jeremy Case
description: The "Hello World" of Directed Acyclic Graphs (DAG's) in Ubiquia, but with Pets!

# Graphs require semantic versions
version:
  major: 1
  minor: 2
  patch: 3

# These are any tags a developer would like attached to their DAG
tags:
  - key: testTagKey1
    value: testTagValue1
  - key: testTagKey2
    value: testTagValue2
  - key: testTagKey3
    value: testTagValue3

# These are capabilities that the graph implements. These will eventually be used by Ubiquia's Executive Service.
capabilities:
  - ImACapability!

# This is the "Agent Communication Language" that this graph is associated with.
agentCommunicationLanguage:
  name: pets
  version:
    major: 1
    minor: 2
    patch: 3

# These are a list of components that comprise this graph.
components:

  - name: Pet-Store-Image-Classifier-Component

    # Setting a component as a template will instruct Ubiquia to not instantiate it as a 
    # Kubernetes pod, but instead to generate a "proxy" for it which will act on its behalf with 
    # dummy data.
    componentType: TEMPLATE
    modelType: Component
    description: This is a an example component that will classify an animal from an image.

    communicationServiceSettings:
      # Ensure the Communication Service exposes this component's endpoints  
      exposeViaCommService: true

    # This is the port that will be exposed for this component when it is deployed.
    port: 5000

    # Data pertaining to the image so that it can be deployed as pods/containers.
    image:
      registry: ubiquia
      repository: pet-store-image-classiffier
      tag: latest

    # An optional configmap to pass to the component.
    config:
      configMap:
        application.yml: |
          config_0:
            value: true
          config_1:
            value: demo-value
      configMountPath: /example/mountpath

    # This is a list of settings to use to override the baseline values should the graph be 
    # deployed with any "flags." Flags are passed to Ubiquia when deploying graphs via the GraphController 
    # RESTful interface.
    overrideSettings:

      # Any example override setting. It will override the baseline image values defined when the 
      # graph is deployed with a "exampleOverride" flag.
      - flag: exampleOverride
        key: image
        value:
          registry: exampleOverrideRegistry
          repository: exampleOverrideRepository
          tag: latest

      # Another example override setting. It will override the template component boolean when the graph
      # is deployed with the "demo" flag.
      - flag: demo
        key: componentType
        value: POD
      - flag: devops
        key: componentType
        value: POD

      # Yet another example to show that even nested configuration values can be overridden.
      - flag: exampleOverride
        key: config
        value:
          configMap:
            application.yml: |
              config_0:
                value: false
              config_99:
                value: demo-value
          configMountPath: /example/mountpath

    # This is an "adapter" for the component; Ubiquia will use this to manage DAG network 
    # traffic to/from the component.
    adapter:
      modelType: Adapter
      adapterType: PUSH
      name: Pet-Store-Image-Classifier-Adapter
      description: This is an example adapter.

      communicationServiceSettings:
        # Ensure the Communication Service exposes this adapter's endpoints  
        exposeViaCommService: true

      # This is the endpoint of the component that the adapter will interact with when it 
      # receives upstream traffic.
      endpoint: /upload-image

      # An example input schema that references a model of the domain ontology.
      inputSubSchemas:
        - modelName: BinaryFile

      # An example input schema that references a model of the domain ontology.
      outputSubSchema:
        modelName: ClassificationResult
      
      # Various configuration for the adapter, such as whether to persist payload traffic in the 
      # Ubiquia database for later diagnostics/analysis.
      adapterSettings:
        persistInputPayload: true
        persistOutputPayload: true
        validateOutputPayload: false
        validateInputPayload: false

      # Like components, Adapters can have overridesettings.
      overrideSettings:
        - flag: demo
          key: adapterSettings
          value:
            persistInputPayload: false
            persistOutputPayload: false
            validateOutputPayload: true

  - name: Pet-Generator-Component

    componentType: TEMPLATE
    modelType: Component
    description: This is a an example component that will generate new Pets given a name.
    port: 8080
    image:
      registry: ubiquia
      repository: pet-store-data-transform
      tag: latest

    overrideSettings:
      - flag: demo
        key: componentType
        value: POD
      - flag: devops
        key: componentType
        value: POD

    adapter:
      modelType: Adapter
      adapterType: HIDDEN
      name: Pet-Generator-Adapter
      description: This is an example adapter.

      communicationServiceSettings:
        exposeViaCommService: true

      endpoint: /pet/store/create-pet

      inputSubSchemas:
        - modelName: ClassificationResult

      outputSubSchema:
        modelName: Animal
      adapterSettings:
        persistInputPayload: true
        persistOutputPayload: true
        validateOutputPayload: false
        validateInputPayload: false

      overrideSettings:
        - flag: demo
          key: adapterSettings
          value:
            persistInputPayload: true
            persistOutputPayload: true
            validateInputPayload: true
            validateOutputPayload: true
            stimulateInputPayload: true

# This is a list of adapters that should be deployed with the graph that are not to be associated
# with components. These are typically useful as ingress/egress components to a DAG.
componentlessAdapters:

  - modelType: Adapter
    adapterType: EGRESS
    name: Pet-Egress-Adapter
    description: This is an example adapter that POSTs incoming payloads to a belief state.

    endpoint: http://pets-belief-state-1-2-3:8080/ubiquia/Animal/add

    inputSubSchemas:
      - modelName: Animal

    egressSettings:
      httpOutputType: POST
      egressType: SYNCHRONOUS
      egressConcurrency: 1

    adapterSettings:
      persistInputPayload: true
      persistOutputPayload: true
      validateOutputPayload: false
      validateInputPayload: false

    overrideSettings:
      - flag: demo
        key: adapterSettings
        value:
          persistInputPayload: true
          persistOutputPayload: true
          validateInputPayload: true
          validateOutputPayload: true

# This is how Ubiquia knows how to connect adapters together into a Directed Acyclic Graph. Conceptually, 
# data flows from left-to-right. As adapters receive payloads, they will send them to their respective 
# components (if they have them), package up the component response (if applicable), and send
# the payload "downstream" (i.e., to any adapters "immediately on the right.")
edges:
  - leftAdapterName: Pet-Store-Image-Classifier-Adapter
    rightAdapterNames:
      - Pet-Generator-Adapter
  - leftAdapterName: Pet-Generator-Adapter
    rightAdapterNames:
      - Pet-Egress-Adapter
