**************************************************


SUCCESS! Ubiquia is installed!


**************************************************
Ubiquia Commmunications Service:

The best way to use Ubiquia is by accessing the Ubiquia Communications Service. Locally, it can be accessed by by port-forwarding it as follows:

1. $ kubectl port-forward svc/ubiquia-core-communication-service -n {{ .Release.Namespace }} {{ .Values.convenience.variables.spring.port }}:{{ .Values.convenience.variables.spring.port }}
2. Navigate to "http://localhost:{{ .Values.convenience.variables.spring.port }}{{ .Values.convenience.variables.spring.swaggerDocs }}"

{{ if .Values.ubiquia.agent.database.h2.enabled }}
**************************************************
Ubiquia Flow Service:

Ubiquia is currently configured to run with in-memory databases. After port-forwarding the Flow Service, its database console can be viewed directly as follows:

1. $ kubectl port-forward svc/ubiquia-core-flow-service -n {{ .Release.Namespace }} {{ .Values.convenience.variables.spring.port }}:{{ .Values.convenience.variables.spring.port }}
2. Navigate to "http://localhost:{{ .Values.convenience.variables.spring.port }}/h2-console"
3. Replace the connection URL with "jdbc:h2:mem:myDb" 
4. Input "sa" for both username and password.
5. Select "connect."
{{ else if .Values.ubiquia.agent.database.yugabyte.enabled }}
**************************************************
YugabyteDB:

Ubiquia is currently running with a Yugabyte database. 

The Yugabyte user console can be viewed directly as follows:
1. $ kubectl port-forward svc/yb-tservers -n {{ .Release.Namespace }} 15433:15433
2. Navigate to "http://localhost:15433"

The Yugabyte master console can be viewed directly as follows:
1. $ kubectl port-forward svc/yb-masters -n {{ .Release.Namespace }} 7000:7000
2. Navigate to "http://localhost:7000"
{{ end }}
{{- $jsonFiles := .Files.Glob "bootstrap/acls/*.json" }}
{{- if $jsonFiles }}
{{ if .Values.ubiquia.agent.storage.minio.enabled }}
**************************************************
Min.io: 

Ubiquia is currently running with Min.io. 

The Minio user console can be viewed directly as follows:
1. $ kubectl port-forward svc/ubiquia-minio-console -n {{ .Release.Namespace }} 9090:9090
2. Navigate to "http://localhost:9090"
{{ if .Values.devMode }}
Retrieve the username/password from Kubernetes
3. $ kubectl get secret ubiquia-minio -n {{ .Release.Namespace }} -o jsonpath="{.data.root-user}" | base64 --decode
4. $ kubectl get secret ubiquia-minio -n {{ .Release.Namespace }} -o jsonpath="{.data.root-password}" | base64 --decode
{{ end }}
{{ end }}
**************************************************
Attempting to register Agent Communication Language (ACL) with Flow Service:
{{- range $path, $_ := $jsonFiles }}
- {{ $path | base }}
{{- end }}
**************************************************
{{- end }}
{{- $yamlFiles := .Files.Glob "bootstrap/graphs/*.yaml" }}
{{- if $yamlFiles }}
**************************************************
Attempting to register Directed Acyclic Graph (DAG) with Flow Service:
{{- range $path, $_ := $yamlFiles }}
- {{ $path | base }}
{{- end }}
**************************************************
{{- end }}
{{- if .Values.ubiquia.agent.flowService.graph.deployments }}
**************************************************
Attempting to deploy Directed Acyclic Graphs (DAG's):

{{- range $i, $v := .Values.ubiquia.agent.flowService.graph.deployments }}
- Name: {{ $v.name }}
  Version: {{ $v.version.major }}.{{ $v.version.minor }}.{{ $v.version.patch }}
  {{- if $v.graphSettings }}
  Graph Settings:
    Flag: {{ $v.graphSettings.flag }}
  {{- end }}
{{- end }}
**************************************************
{{- else }}
No Graph Deployments defined.
{{- end }}