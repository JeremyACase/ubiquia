package org.ubiquia.acl.generated;

import io.minio.errors.MinioException;
import jakarta.transaction.Transactional;
import java.io.IOException;
import java.io.InputStream;
import java.util.Objects;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.ubiquia.common.library.api.interfaces.InterfaceEntityToDtoMapper;
import org.ubiquia.common.library.belief.state.libraries.service.io.MinioService;
import org.ubiquia.common.library.belief.state.libraries.service.io.ObjectMetadataService;
import org.ubiquia.common.library.dao.component.EntityDao;
import org.ubiquia.common.library.dao.controller.GenericUbiquiaDaoController;
import org.ubiquia.common.library.implementation.service.mapper.ObjectMetadataDtoMapper;
import org.ubiquia.common.model.ubiquia.dto.ObjectMetadata;
import org.ubiquia.common.model.ubiquia.entity.ObjectMetadataEntity;

@RestController
@RequestMapping("/ubiquia/belief-state-service/object")
@Transactional
public class ObjectController extends GenericUbiquiaDaoController<
    ObjectMetadataEntity,
    ObjectMetadata> {

private static final Logger logger = LoggerFactory.getLogger(ObjectController.class);

    @Value("${ubiquia.beliefState.domainName}")
    private String domainName;

    @Autowired(required = false)
    private ObjectMetadataService objectMetadataService;

    @Autowired
    private ObjectMetadataDtoMapper dtoMapper;

    @Autowired
    private EntityDao<ObjectMetadataEntity> entityDao;

    @Autowired(required = false)
    private MinioService minioService;

    @Override
    public Logger getLogger() {
        return logger;
    }

    @Override
    public EntityDao<ObjectMetadataEntity> getDataAccessObject() {
        return this.entityDao;
    }

    @Override
    public InterfaceEntityToDtoMapper<
        ObjectMetadataEntity,
        ObjectMetadata> getDataTransferObjectMapper() {
        return this.dtoMapper;
    }

    @PostMapping("/upload")
    public ObjectMetadata uploadFile(
        @RequestParam("file") MultipartFile file) throws IOException, MinioException {

        this.getLogger().info("Received a request to upload file {} to bucket {}...",
            file.getName(),
            this.domainName);

        if (Objects.isNull(this.minioService)) {
            throw new IllegalArgumentException("ERROR: No available object storage service "
                + "is currently running...");
        }

        var metadata = this.objectMetadataService.persistObjectMetadata(this.domainName, file);
        this.minioService.uploadFile(this.domainName, metadata.getId(), file);
        this.getLogger().info("...object stored: {}",
            this.objectMapper.writeValueAsString(metadata));

        return metadata;
    }

    @GetMapping("/download/{filename}")
    public ResponseEntity<byte[]> downloadFile(
        @PathVariable("filename") String filename)
        throws MinioException, IOException {

        this.getLogger().info("Received a request to download file {} from bucket {}...",
            filename,
            this.domainName);

        InputStream data = null;
        try {
            data = this.minioService.downloadFile(this.domainName, filename);
        } catch (MinioException e) {
            logger.info("MinioException: {}", e.getMessage());
        }

        ResponseEntity<byte[]> response = null;
        if (Objects.isNull(data)) {
            this.getLogger().info("...no file found in that bucket...");
            response = ResponseEntity.notFound().build();
        } else {
            this.getLogger().debug("...file found; retrieving...");
            response = ResponseEntity
                .ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\""
                    + filename + "\"")
                .body(data.readAllBytes());
        }

        return response;
    }
}