{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Machina Common Models",
  "type": "object",
  "definitions": {
    "CollectRequest": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "COLLECTREQUEST-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "idParentReq": {
          "type": "string",
          "description": "The unique ID of the collect request record from which this request originated. This may be used for cases of sensor-to-sensor tasking, such as tip/cue operations.",
          "example": "da98671b-34db-47bf-8c8d-7c668b92c800"
        },
        "msgType": {
          "type": "string",
          "description": "The type of external message from which this request originated.",
          "example": "SU67"
        },
        "msgCreateDate": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of the external message from which this request originated, if applicable, in ISO8601 UTC format with millisecond precision.",
          "example": "2024-04-25T08:17:01.346Z"
        },
        "type": {
          "type": "string",
          "description": "The type of this collect or contact request (DIRECTED SEARCH, DWELL, OBJECT, POL, RATE TRACK, SEARCH, SOI, STARE, TTC, VOLUME SEARCH, etc.).",
          "example": "DWELL"
        },
        "idPlan": {
          "type": "string",
          "description": "Unique identifier of the parent plan or schedule associated with this request.  If null, this request is assumed not associated with a plan or schedule.",
          "example": "REF-PLAN-ID"
        },
        "planIndex": {
          "type": "integer",
          "format": "int32",
          "description": "Index number (integer) for records within a collection plan or schedule.",
          "example": 8
        },
        "taskId": {
          "type": "string",
          "description": "Task ID associated with this request.  A task ID may be associated with a single collect request or may be used to tie together the sub-requests of a full collect, for example a DWELL consisting of many dwell points.",
          "example": "TASK-ID"
        },
        "dwellId": {
          "type": "string",
          "description": "The dwell ID associated with this request.  A dwell ID is dwell point specific and a DWELL request consist of many dwell point requests.",
          "example": "DWELL-ID"
        },
        "externalId": {
          "type": "string",
          "description": "Optional ID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.",
          "example": "EXTERNAL-ID"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the requested/scheduled/planned sensor associated with this request.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
          "example": "REF-SENSOR-ID"
        },
        "origSensorId": {
          "type": "string",
          "description": "Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.  If both idSensor and origSensorId are null then the request is assumed to be a general request for observations or contact on an object, if specified, or an area/volume.  In this case, the requester may specify a desired obType.",
          "example": "ORIGSENSOR-ID"
        },
        "obType": {
          "type": "string",
          "description": "Optional type of observation (EO, IR, RADAR, RF-ACTIVE, RF-PASSIVE, OTHER) requested.  This field may correspond to a request of a specific sensor, or to a general non sensor specific request.",
          "example": "RADAR"
        },
        "priority": {
          "type": "string",
          "description": "The priority of the collect request  (EMERGENCY, FLASH, IMMEDIATE, PRIORITY, ROUTINE).",
          "example": "EMERGENCY"
        },
        "taskCategory": {
          "type": "integer",
          "format": "int32",
          "description": "The (SSN) tasking category (1-5) associated with this request.  The tasking category defines the priority of gathering and transmitting the requested observational data.  Note that category definitions are sensor type specific.",
          "example": 4
        },
        "suffix": {
          "type": "string",
          "description": "The (SSN) tasking suffix (A-Z) associated with this request.  The suffix defines the amount of observational data and the frequency of collection.  Note that suffix definitions are sensor type specific.",
          "example": "T"
        },
        "uctFollowUp": {
          "type": "boolean",
          "description": "Boolean indicating that this collect request is UCT follow-up.",
          "example": false
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "The start time or earliest time of the collect or contact request window, in ISO 8601 UTC format.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the collect or contact request window, in ISO 8601 UTC format.  If no endTime or duration is provided it is assumed the request is either ongoing or that the request is for a specified number of tracks (numTracks).  If both duration and endTime are provided, the endTime is assumed to take precedence.",
          "example": "2018-01-01T18:00:00.123456Z"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the target on-orbit object for this request.",
          "readOnly": true,
          "example": "REF-ONORBIT-ID"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/catalog number of the target on-orbit object for this request.",
          "example": 101
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "taskGroup": {
          "type": "string",
          "description": "The tasking group to which the target object is assigned.",
          "example": "729"
        },
        "iron": {
          "type": "integer",
          "format": "int32",
          "description": "Inter-Range Operations Number.  Four-digit identifier used to schedule and identify AFSCN contact support for booster, launch, and on-orbit operations.",
          "example": 3
        },
        "orbitRegime": {
          "type": "string",
          "description": "The orbit regime of the target (GEO, HEO, LAUNCH, LEO, MEO, OTHER).",
          "example": "GEO"
        },
        "targetSize": {
          "type": "number",
          "format": "double",
          "description": "The minimum object (diameter) size, in meters, to be reported.",
          "example": 1.1
        },
        "rcsMin": {
          "type": "number",
          "format": "double",
          "description": "The minimum Radar Cross-Section of the target, in m^2.  If only minimum RCS is provided it is assumed to be minimum reportable RCS.",
          "example": 1.1
        },
        "rcs": {
          "type": "number",
          "format": "double",
          "description": "The Radar Cross-Section of the target, in m^2.",
          "example": 1.1
        },
        "rcsMax": {
          "type": "number",
          "format": "double",
          "description": "The maximum Radar Cross-Section of the target, in m^2.",
          "example": 1.1
        },
        "freqMin": {
          "type": "number",
          "format": "double",
          "description": "The minimum frequency of interest, in MHz.  If only minimum frequency is provided it is assumed to be minimum reportable frequency.",
          "example": 1.1
        },
        "freq": {
          "type": "number",
          "format": "double",
          "description": "The estimated or expected emission frequency of the target, in MHz.",
          "example": 1.1
        },
        "freqMax": {
          "type": "number",
          "format": "double",
          "description": "The maximum frequency of interest, in MHz.",
          "example": 1.1
        },
        "polarization": {
          "type": "string",
          "description": "The RF polarization (H, LHC, RHC, V).",
          "example": "H"
        },
        "visMagMin": {
          "type": "number",
          "format": "double",
          "description": "The minimum estimated or expected visual magnitude of the target, in Magnitudes (M).  If only minimum vismag is provided it is assumed to be minimum reportable vismag.",
          "example": 1.1
        },
        "visMag": {
          "type": "number",
          "format": "double",
          "description": "The estimated or expected visual magnitude of the target, in Magnitudes (M).",
          "example": 1.1
        },
        "visMagMax": {
          "type": "number",
          "format": "double",
          "description": "The maximum estimated or expected visual magnitude of the target, in Magnitudes (M).",
          "example": 1.1
        },
        "spectralModel": {
          "type": "string",
          "description": "The spectral model used for the irradiance calculation.",
          "example": "Example Model"
        },
        "reflectance": {
          "type": "number",
          "format": "double",
          "description": "The fraction of solar energy reflected from target.",
          "example": 1.1
        },
        "irradiance": {
          "type": "number",
          "format": "double",
          "description": "The target object irradiance value.",
          "example": 1.1
        },
        "numFrames": {
          "type": "integer",
          "format": "int32",
          "description": "For optical sensors, the requested number of frames to capture at each sensor step.",
          "example": 6
        },
        "frameRate": {
          "type": "number",
          "format": "double",
          "description": "For optical sensors, the frame rate of the camera, in Hz.",
          "example": 1.1
        },
        "integrationTime": {
          "type": "number",
          "format": "double",
          "description": "For optical sensors, the integration time per camera frame, in milliseconds.",
          "example": 1.1
        },
        "numTracks": {
          "type": "integer",
          "format": "int32",
          "description": "The number of requested tracks on the target.  If numTracks is not provided it is assumed to indicate all possible observations every pass over the request duration or within the request start/end window.",
          "example": 3
        },
        "numObs": {
          "type": "integer",
          "format": "int32",
          "description": "The number of requested observations on the target.",
          "example": 9
        },
        "duration": {
          "type": "integer",
          "format": "int32",
          "description": "The duration of the collect request, in seconds.  If both duration and endTime are provided, the endTime is assumed to take precedence.",
          "example": 11
        },
        "srchPattern": {
          "type": "string",
          "description": "The search pattern to be executed for this request (e.g. PICKET-FENCE, SCAN, etc.).",
          "example": "SCAN"
        },
        "scenario": {
          "type": "string",
          "description": "Pre-coordinated code, direction, or configuration to be executed by the sensor or site for this collect or contact.",
          "example": "Example direction"
        },
        "idElset": {
          "type": "string",
          "description": "ID of the UDL Elset of the object associated with this request.",
          "example": "REF-ELSET-ID"
        },
        "idManifold": {
          "type": "string",
          "description": "ID of the UDL Manifold Elset of the object associated with this request.  A Manifold Elset provides theoretical Keplerian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.",
          "example": "REF-MANIFOLD-ID"
        },
        "idStateVector": {
          "type": "string",
          "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
          "example": "STATEVECTOR-ID"
        },
        "esId": {
          "type": "string",
          "description": "ID of the UDL Ephemeris Set of the object associated with this request.",
          "example": "ES-ID"
        },
        "epoch": {
          "type": "string",
          "format": "date-time",
          "description": "Epoch time, in ISO 8601 UTC format, of the orbital elements.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "semiMajorAxis": {
          "type": "number",
          "format": "double",
          "description": "The average of the periapsis and apoapsis distances, in kilometers. For circular orbits, the semimajor axis is the distance between the centers of the bodies.",
          "example": 1.1
        },
        "eccentricity": {
          "type": "number",
          "format": "double",
          "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle.",
          "example": 1.1
        },
        "inclination": {
          "type": "number",
          "format": "double",
          "description": "The angle, in degrees, between the equator and the orbit plane when looking from the center of the Earth. Inclination ranges from 0-180 degrees, with 0-90 representing posigrade orbits and 90-180 representing retrograde orbits.",
          "example": 1.1
        },
        "raan": {
          "type": "number",
          "format": "double",
          "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node.",
          "example": 1.1
        },
        "argOfPerigee": {
          "type": "number",
          "format": "double",
          "description": "The argument of perigee is the angle, in degrees, formed between the perigee and the ascending node.",
          "example": 1.1
        },
        "trueAnomoly": {
          "type": "number",
          "format": "double",
          "description": "The true anomaly defines the angular position, in degrees, of the object on it's orbital path as measured from the orbit focal point at epoch.  The true anomaly is referenced from perigee.",
          "example": 1.1
        },
        "ra": {
          "type": "number",
          "format": "double",
          "description": "The expected or directed right ascension angle, in degrees, for search or target acquisition.",
          "example": 1.1
        },
        "dec": {
          "type": "number",
          "format": "double",
          "description": "The expected or directed declination angle, in degrees, for search or target acquisition.",
          "example": 1.1
        },
        "az": {
          "type": "number",
          "format": "double",
          "description": "The expected or directed azimuth angle, in degrees, for search or target acquisition.",
          "example": 1.1
        },
        "el": {
          "type": "number",
          "format": "double",
          "description": "The expected or directed elevation angle, in degrees, for search or target acquisition.",
          "example": 1.1
        },
        "range": {
          "type": "number",
          "format": "double",
          "description": "The expected acquisition range or defined center range, in km.",
          "example": 1.1
        },
        "extentAz": {
          "type": "number",
          "format": "double",
          "description": "The extent of the azimuth angle, in degrees, from center azimuth to define a spatial volume.",
          "example": 1.1
        },
        "extentEl": {
          "type": "number",
          "format": "double",
          "description": "The extent of the elevation angle, in degrees, from center elevation to define a spatial volume.",
          "example": 1.1
        },
        "extentRange": {
          "type": "number",
          "format": "double",
          "description": "The extent of the range, in km, from center range to define a spatial volume.",
          "example": 1.1
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "WGS-84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).  If an accompanying stopLat is provided, then the lat value can be assumed to be the starting latitude of a volume definition.",
          "example": 1.1
        },
        "lon": {
          "type": "number",
          "format": "double",
          "description": "WGS-84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).  If an accompanying stopLon is provided, then lon value can be assumed to be the starting longitude of a volume definition.",
          "example": 1.1
        },
        "alt": {
          "type": "number",
          "format": "double",
          "description": "Height above WGS-84 ellipsoid (HAE), in kilometers.  If an accompanying stopAlt is provided, then alt value can be assumed to be the starting altitude of a volume definition.",
          "example": 1.1
        },
        "stopLat": {
          "type": "number",
          "format": "double",
          "description": "The stopping WGS-84 latitude of a volume definition, in degrees.  -90 to 90 degrees (negative values south of equator).  The stopLat value is only meaningful if a (starting) lat value is provided.",
          "example": 1.1
        },
        "stopLon": {
          "type": "number",
          "format": "double",
          "description": "The stopping WGS-84 longitude of a volume definition, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).  The stopLon value is only meaningful if a (starting) lon value is provided.",
          "example": 1.1
        },
        "stopAlt": {
          "type": "number",
          "format": "double",
          "description": "The stopping HAE WGS-84 height above ellipsoid (HAE), of a volume definition, in kilometers.  The stopAlt value is only meaningful if a (starting) alt value is provided.",
          "example": 1.1
        },
        "srchInc": {
          "type": "number",
          "format": "double",
          "description": "The maximum inclination, in degrees, to be used in search operations.",
          "example": 1.1
        },
        "xAngle": {
          "type": "number",
          "format": "double",
          "description": "The angular distance, in degrees, in the sensor-x direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
          "example": 1.1
        },
        "yAngle": {
          "type": "number",
          "format": "double",
          "description": "The angular distance, in degrees, in the sensor-y direction from scan center defined by the central vector.  The specification of xAngle and yAngle defines a rectangle of width 2*xAngle and height 2*yAngle centered about the central vector.",
          "example": 1.1
        },
        "orientAngle": {
          "type": "number",
          "format": "double",
          "description": "The magnitude of rotation, in degrees, between the xAngle direction and locally defined equinoctial plane.  A positive value indicates clockwise rotation about the sensor boresight vector.",
          "example": 1.1
        },
        "customer": {
          "type": "string",
          "description": "The customer for this request.",
          "example": "Bluestaq"
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "TRANSACTION-ID"
        },
        "notes": {
          "type": "string",
          "description": "Notes or comments associated with this request.",
          "example": "Example notes"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "Example source"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "stateVector": {
          "$ref": "#/components/schemas/StateVector"
        },
        "elset": {
          "$ref": "#/components/schemas/Elset"
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "PROVIDER_TAG1",
            "PROVIDER_TAG2"
          ]
        },
        "collectResponse": {
          "items": {
            "$ref": "#/components/schemas/CollectResponse"
          },
          "type": "array",
          "description": "CollectResponses associated to request id. Read-only details (only used on detail queries, not to be provided on create/update operations).",
          "readOnly": true
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "type",
        "startTime",
        "source",
        "dataMode"
      ],
      "title": "CollectRequest",
      "description": "Collect Requests support several types of individual requests, or planned/scheduled tasks on sensors and/or orbital objects. Options are provided to accomodate most common sensor contact and collection applications, including single sensor-object tasking, search operations, and TT&C support. Multiple requests originating from a plan or schedule may be associated to a sensor plan if desired."
    },
    "CollectResponse": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "COLLECTRESPONSE-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "idRequest": {
          "type": "string",
          "description": "Unique identifier of the request associated with this response.",
          "example": "REF-REQUEST-ID"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the target on-orbit object associated with this response.",
          "readOnly": true,
          "example": "REF-ONORBIT-ID"
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/catalog number of the target on-orbit object.",
          "example": 101
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "taskId": {
          "type": "string",
          "description": "Optional task ID associated with the request/response.",
          "example": "TASK-ID"
        },
        "idPlan": {
          "type": "string",
          "description": "Unique identifier of the parent plan or schedule associated with the request/response.",
          "example": "REF-PLAN-ID"
        },
        "externalId": {
          "type": "string",
          "description": "UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.",
          "example": "EXTERNAL-ID"
        },
        "status": {
          "type": "string",
          "description": "The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):\n\nACCEPTED: The collect or contact request has been received and accepted.\n\nCANCELLED: A previously scheduled collect or contact whose execution was cancelled.\n\nCOLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.\n\nCOMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.\n\nDELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.\n\nFAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.\n\nPARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.\n\nPROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.\n\nREJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.\n\nSCHEDULED: The request was received and has been scheduled for execution.",
          "example": "ACCEPTED"
        },
        "actualStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "The actual start time of the collect or contact, in ISO 8601 UTC format.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "actualEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "The actual end time of the collect or contact, in ISO 8601 UTC format.",
          "example": "2018-01-01T18:00:00.123456Z"
        },
        "altStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Proposed alternative start time, in ISO 8601 UTC format.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "altEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "Proposed alternative end time, in ISO 8601 UTC format.",
          "example": "2018-01-01T18:00:00.123456Z"
        },
        "errCode": {
          "type": "string",
          "description": "Error code associated with this request/response.",
          "example": "ERROR CODE"
        },
        "srcTyps": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
          "example": [
            "DOA",
            "DWELL"
          ]
        },
        "srcIds": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).",
          "example": [
            "DOA_ID",
            "DWELL_ID"
          ]
        },
        "notes": {
          "type": "string",
          "description": "Notes or comments associated with this response.",
          "example": "Example notes"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the reporting sensor.",
          "example": "REF-SENSOR-ID"
        },
        "origSensorId": {
          "type": "string",
          "description": "Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.",
          "example": "ORIGSENSOR-ID"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "PROVIDER_TAG1",
            "PROVIDER_TAG2"
          ]
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "idRequest",
        "source",
        "dataMode"
      ],
      "title": "CollectResponse",
      "description": "Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery."
    },
    "Elset": {
      "properties": {
        "idElset": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "ELSET-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/catalog number of the target on-orbit object.",
          "example": 12
        },
        "epoch": {
          "type": "string",
          "format": "date-time",
          "description": "Elset epoch time in ISO 8601 UTC format, with microsecond precision.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "meanMotion": {
          "type": "number",
          "format": "double",
          "description": "Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.",
          "example": 1.1
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
          "readOnly": true,
          "example": "ONORBIT-ID"
        },
        "uct": {
          "type": "boolean",
          "description": "Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
          "example": false
        },
        "eccentricity": {
          "type": "number",
          "format": "double",
          "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.",
          "example": 0.333
        },
        "inclination": {
          "type": "number",
          "format": "double",
          "description": "The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.",
          "example": 45.1
        },
        "raan": {
          "type": "number",
          "format": "double",
          "description": "Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.",
          "example": 1.1
        },
        "argOfPerigee": {
          "type": "number",
          "format": "double",
          "description": "The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.",
          "example": 1.1
        },
        "meanAnomaly": {
          "type": "number",
          "format": "double",
          "description": "Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.",
          "example": 179.1
        },
        "revNo": {
          "type": "integer",
          "format": "int32",
          "description": "The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.",
          "example": 111
        },
        "bStar": {
          "type": "number",
          "format": "double",
          "description": "The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.",
          "example": 1.1
        },
        "agom": {
          "type": "number",
          "format": "double",
          "description": "AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.",
          "example": 0.0126
        },
        "ballisticCoeff": {
          "type": "number",
          "format": "double",
          "description": "Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.",
          "example": 0.00815
        },
        "meanMotionDot": {
          "type": "number",
          "format": "double",
          "description": "1st derivative of the mean motion with respect to time. Units are revolutions per day squared.",
          "example": 1.1
        },
        "meanMotionDDot": {
          "type": "number",
          "format": "double",
          "description": "2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.",
          "example": 1.1
        },
        "semiMajorAxis": {
          "type": "number",
          "format": "double",
          "description": "The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.",
          "example": 1.1
        },
        "period": {
          "type": "number",
          "format": "double",
          "description": "Period of the orbit equal to inverse of mean motion, in minutes.",
          "example": 1.1
        },
        "apogee": {
          "type": "number",
          "format": "double",
          "description": "The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).",
          "example": 1.1
        },
        "perigee": {
          "type": "number",
          "format": "double",
          "description": "The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).",
          "example": 1.1
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "idOrbitDetermination": {
          "type": "string",
          "description": "Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.",
          "example": "026dd511-8ba5-47d3-9909-836149f87686"
        },
        "effectiveFrom": {
          "type": "string",
          "format": "date-time",
          "description": "Read-only start time at which this elset was the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "effectiveUntil": {
          "type": "string",
          "format": "date-time",
          "description": "Read-only end time at which this elset was no longer the 'current' elset for its satellite. This field and is set by the system automatically and ignored on create/edit operations.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "line1": {
          "type": "string",
          "description": "Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
          "readOnly": true,
          "example": "Example line1"
        },
        "line2": {
          "type": "string",
          "description": "Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.",
          "readOnly": true,
          "example": "Example line2"
        },
        "descriptor": {
          "type": "string",
          "description": "Optional source-provided and searchable metadata or descriptor of the data.",
          "example": "Example description"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "rawFileURI": {
          "type": "string",
          "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
          "example": "Example URI"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "PROVIDER_TAG1",
            "PROVIDER_TAG2"
          ]
        },
        "algorithm": {
          "type": "string",
          "description": "Optional algorithm used to produce this record.",
          "example": "Example algorithm"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "OBSERVATION_UUID1",
            "OBSERVATION_UUID2"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string",
            "enum": [
              "EO",
              "RADAR",
              "RF",
              "DOA",
              "ELSET",
              "SV"
            ]
          },
          "type": "array",
          "description": "Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
          "example": [
            "RADAR",
            "RF"
          ]
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "TRANSACTION-ID"
        },
        "ephemType": {
          "type": "integer",
          "format": "int16",
          "description": "The ephemeris type associated with this TLE:\n\n0:&nbsp;SGP (or SGP4 with Kozai mean motion)\n\n1:&nbsp;SGP (Kozai mean motion)\n\n2:&nbsp;SGP4 (Brouver mean motion)\n\n3:&nbsp;SDP4\n\n4:&nbsp;SGP4-XP\n\n5:&nbsp;SDP8\n\n6:&nbsp;SP (osculating mean motion)\n\n",
          "example": 1
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "epoch",
        "source",
        "dataMode"
      ],
      "title": "Elset",
      "description": "An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters."
    },
    "EOObservation": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "EOOBSERVATION-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "obTime": {
          "type": "string",
          "format": "date-time",
          "description": "Ob detection time in ISO 8601 UTC, up to microsecond precision. Consumers should contact the provider for details on their obTime specifications.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "corrQuality": {
          "type": "number",
          "format": "double",
          "description": "Object Correlation Quality score of the observation when compared to a known orbit state, (non-standardized). Users should consult data providers regarding the expected range of values.",
          "example": 1.1
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the target on-orbit object, if correlated.",
          "readOnly": true,
          "example": "ONORBIT-ID"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the reporting sensor.",
          "example": "SENSOR-ID"
        },
        "idSkyImagery": {
          "type": "string",
          "description": "Unique identifier of the Sky Imagery.",
          "example": "SKYIMAGERY-ID"
        },
        "collectMethod": {
          "type": "string",
          "description": "Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).",
          "example": "AUTOTRACK"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/Catalog number of the target on-orbit object.",
          "example": 5
        },
        "taskId": {
          "type": "string",
          "description": "Optional identifier to indicate the specific tasking which produced this observation.",
          "example": "TASK-ID"
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "TRANSACTION-ID"
        },
        "trackId": {
          "type": "string",
          "description": "Optional identifier of the track to which this observation belongs.",
          "example": "TRACK-ID"
        },
        "obPosition": {
          "type": "string",
          "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
          "example": "FIRST"
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "origSensorId": {
          "type": "string",
          "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
          "example": "ORIGSENSOR-ID"
        },
        "uct": {
          "type": "boolean",
          "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
          "example": false
        },
        "azimuth": {
          "type": "number",
          "format": "double",
          "description": "Line of sight azimuth angle in degrees and topocentric frame.  Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "azimuthMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "azimuthUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight azimuth angle, in degrees.",
          "example": 1.1
        },
        "azimuthBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor line of sight azimuth angle bias in degrees.",
          "example": 1.1
        },
        "azimuthRate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of the line of sight azimuth in degrees per second.",
          "example": 1.1
        },
        "elevation": {
          "type": "number",
          "format": "double",
          "description": "Line of sight elevation in degrees and topocentric frame. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "elevationMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "elevationUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight elevation angle, in degrees.",
          "example": 1.1
        },
        "elevationBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor line of sight elevation bias in degrees.",
          "example": 1.1
        },
        "elevationRate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of the line of sight elevation in degrees per second.",
          "example": 1.1
        },
        "range": {
          "type": "number",
          "format": "double",
          "description": "Line of sight range in km. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "rangeMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "rangeUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight range, in kilometers.",
          "example": 1.1
        },
        "rangeBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor line of sight range bias in km.",
          "example": 1.1
        },
        "rangeRate": {
          "type": "number",
          "format": "double",
          "description": "Range rate in km/s. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "rangeRateMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "rangeRateUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight range rate, in kilometers/second.",
          "example": 1.1
        },
        "ra": {
          "type": "number",
          "format": "double",
          "description": "Line of sight right ascension, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "raMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "raRate": {
          "type": "number",
          "format": "double",
          "description": "Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "raUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight right ascension angle, in degrees.",
          "example": 1.1
        },
        "raBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor line of sight right ascension bias in degrees.",
          "example": 1.1
        },
        "declination": {
          "type": "number",
          "format": "double",
          "description": "Line of sight declination, in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. Reported value should include all applicable corrections as specified on the source provider data card.  If uncertain, consumers should contact the provider for details on the applied corrections.",
          "example": 1.1
        },
        "declinationMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "declinationRate": {
          "type": "number",
          "format": "double",
          "description": "Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "declinationUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight declination angle, in degrees.",
          "example": 1.1
        },
        "declinationBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor line of sight declination angle bias in degrees.",
          "example": 1.1
        },
        "losx": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "losy": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "losz": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "losUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight pointing in micro-radians.",
          "example": 1.1
        },
        "losxvel": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "losyvel": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "loszvel": {
          "type": "number",
          "format": "double",
          "description": "Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senlat": {
          "type": "number",
          "format": "double",
          "description": "Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
          "example": 45.1
        },
        "senlon": {
          "type": "number",
          "format": "double",
          "description": "Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
          "example": 179.1
        },
        "senalt": {
          "type": "number",
          "format": "double",
          "description": "Sensor altitude at obTime (if mobile/onorbit) in km.",
          "example": 1.1
        },
        "senx": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "seny": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senz": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senvelx": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senvely": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senvelz": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.",
          "example": 1.1
        },
        "senQuat": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).",
          "example": [
            0.4492,
            0.02,
            0.8765,
            0.2213
          ]
        },
        "fovCount": {
          "type": "integer",
          "format": "int32",
          "description": "The number of RSOs detected in the sensor field of view.",
          "example": 1
        },
        "fovCountUCT": {
          "type": "integer",
          "format": "int32",
          "description": "The number of uncorrelated tracks in the field of view.",
          "example": 2
        },
        "expDuration": {
          "type": "number",
          "format": "double",
          "description": "Image exposure duration in seconds. For observations performed using frame stacking or synthetic tracking methods, the exposure duration should be the total integration time. This field is highly recommended / required if the observations are going to be used for photometric processing.",
          "example": 1.1
        },
        "zeroptd": {
          "type": "number",
          "format": "double",
          "description": "Formula: 2.5 * log_10 (zero_mag_counts / expDuration).",
          "example": 1.1
        },
        "netObjSig": {
          "type": "number",
          "format": "double",
          "description": "Net object signature = counts / expDuration.",
          "example": 1.1
        },
        "netObjSigUnc": {
          "type": "number",
          "format": "double",
          "description": "Net object signature uncertainty = counts uncertainty / expDuration.",
          "example": 1.1
        },
        "mag": {
          "type": "number",
          "format": "double",
          "description": "Measure of observed brightness calibrated against the Gaia G-band in units of magnitudes.",
          "example": 1.1
        },
        "magUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty of the observed brightness in units of magnitudes.",
          "example": 1.1
        },
        "magNormRange": {
          "type": "number",
          "format": "double",
          "description": "Formula: mag - 5.0 * log_10(geo_range / 1000000.0).",
          "example": 1.1
        },
        "geolat": {
          "type": "number",
          "format": "double",
          "description": "For GEO detections, the latitude in degrees north.",
          "example": 1.1
        },
        "geolon": {
          "type": "number",
          "format": "double",
          "description": "For GEO detections, the longitude in degrees east.",
          "example": 1.1
        },
        "geoalt": {
          "type": "number",
          "format": "double",
          "description": "For GEO detections, the altitude in km.",
          "example": 1.1
        },
        "georange": {
          "type": "number",
          "format": "double",
          "description": "For GEO detections, the range in km.",
          "example": 1.1
        },
        "skyBkgrnd": {
          "type": "number",
          "format": "double",
          "description": "Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.",
          "example": 1.1
        },
        "primaryExtinction": {
          "type": "number",
          "format": "double",
          "description": "Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.",
          "example": 1.1
        },
        "primaryExtinctionUnc": {
          "type": "number",
          "format": "double",
          "description": "Primary Extinction Coefficient Uncertainty, in Magnitudes.",
          "example": 1.1
        },
        "solarPhaseAngle": {
          "type": "number",
          "format": "double",
          "description": "The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.",
          "example": 1.1
        },
        "solarEqPhaseAngle": {
          "type": "number",
          "format": "double",
          "description": "The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing (i.e. before the opposition) and positive when opening (after the opposition).",
          "example": 1.1
        },
        "solarDecAngle": {
          "type": "number",
          "format": "double",
          "description": "Angle from the sun to the equatorial plane.",
          "example": 1.1
        },
        "shutterDelay": {
          "type": "number",
          "format": "double",
          "description": "Shutter delay in seconds.",
          "example": 1.1
        },
        "timingBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor timing bias in seconds.",
          "example": 1.1
        },
        "rawFileURI": {
          "type": "string",
          "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
          "example": "Example URI"
        },
        "intensity": {
          "type": "number",
          "format": "double",
          "description": "Intensity of the target for IR observations, in kw/sr/um.",
          "example": 1.1
        },
        "bgIntensity": {
          "type": "number",
          "format": "double",
          "description": "Background intensity for IR observations, in kw/sr/um.",
          "example": 1.1
        },
        "descriptor": {
          "type": "string",
          "description": "Optional source-provided and searchable metadata or descriptor of the data.",
          "example": "PROVIDED_DATA1"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "PROVIDER_TAG1",
            "PROVIDER_TAG2"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "zeroPtdUnc": {
          "type": "number",
          "format": "double",
          "description": "This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.",
          "example": 1.1
        },
        "eoobservationDetails": {
          "$ref": "#/components/schemas/EOObservationDetails"
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "referenceFrame": {
          "$ref": "#/components/schemas/EOObservation_ReferenceFrame"
        },
        "senReferenceFrame": {
          "$ref": "#/components/schemas/SenReferenceFrame"
        },
        "umbra": {
          "type": "boolean",
          "description": "Boolean indicating that the target object was in umbral eclipse at the time of this observation.",
          "example": false
        },
        "penumbra": {
          "type": "boolean",
          "description": "Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.",
          "example": false
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        },
        "type": {
          "type": "string",
          "description": "Read only field specifying the type of observation (e.g. OPTICAL, OPTICAL_IR, LASER_RANGING, etc).",
          "readOnly": true,
          "example": "OPTICAL"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "coordinateSystem": {
          "type": "string",
          "enum": [
            "GEOCENTRIC",
            "TOPOCENTRIC"
          ],
          "description": "Coordinate system"
        },
        "wcs": {
          "$ref": "#/components/schemas/WorldCoordinateSystem",
          "description": "World Coordinate System (WCS) for the associated image based on astrometric fit"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "obTime",
        "source",
        "dataMode"
      ],
      "title": "EOObservation",
      "description": "Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider."
    },
    "EOObservationDetails": {
      "properties": {
        "idEOObservation": {
          "type": "string",
          "description": "Unique identifier of the parent EOObservation.",
          "example": "EOOBSERVATION-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format, will be set to EOObservation classificationMarking if blank.",
          "example": "U"
        },
        "obTime": {
          "type": "string",
          "format": "date-time",
          "description": "Ob detection time in ISO 8601 UTC with microsecond precision, will be set to EOObservation obTime if blank.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "predictedRa": {
          "type": "number",
          "format": "double",
          "description": "Predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
          "example": 10.1
        },
        "predictedDeclination": {
          "type": "number",
          "format": "double",
          "description": "Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
          "example": 10.1
        },
        "predictedAzimuth": {
          "type": "number",
          "format": "double",
          "description": "Predicted Azimuth angle of the target object from a ground -based sensor (no atmospheric refraction correction required) in degrees. AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
          "example": 10.1
        },
        "predictedElevation": {
          "type": "number",
          "format": "double",
          "description": "Predicted elevation angle of the target object from a ground -based sensor (no atmospheric refraction correction required) in degrees. AZ_EL implies apparent topocentric place in true of date reference frame as seen from the observer with aberration due to the observer velocity and light travel time applied.",
          "example": 10.1
        },
        "sunAzimuth": {
          "type": "number",
          "format": "double",
          "description": "Azimuth angle of the sun from a ground-based telescope (no atmospheric refraction correction required) the observer with aberration due to the observer velocity and light travel time applied in degrees.",
          "example": 10.1
        },
        "sunElevation": {
          "type": "number",
          "format": "double",
          "description": "Elevation angle of the sun from a ground-based telescope (no atmospheric refraction correction required) in degrees.",
          "example": 10.1
        },
        "numSpectralFilters": {
          "type": "integer",
          "format": "int16",
          "description": "The value is the number of spectral filters used.",
          "example": 10
        },
        "spectralFilters": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            "Keyword1",
            "Keyword2"
          ]
        },
        "spectralZMFL": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the in-band average irradiance of a 0th mag source. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = W/m2/nm.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "spectralFilterSolarMag": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the in-band solar magnitude at 1 A.U. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.  Units = mag.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "zeroPoints": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the value for the zero-point calculated for each filter denoted in spectralFilters. It is the difference between the catalog mag and instrumental mag for a set of standard stars. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "zeroPointsUnc": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the uncertainty in the zero point for the filter denoted in spectralFilters. For use with All Sky photometry. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "extinctionCoeffs": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The extinction coefficient computed for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. Units = mag/airmass.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "extinctionCoeffsUnc": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the uncertainty in the extinction coefficient for the nth filter. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n. -9999 for space-based sensors. Units = mag/airmass.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "colorCoeffs": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Color coefficient for filter n for a space-based sensor where there is no atmospheric extinction. Must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "numNeutralDensityFilters": {
          "type": "integer",
          "format": "int16",
          "description": "The value is the number of neutral density filters used.",
          "example": 12
        },
        "neutralDensityFilterNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            "numNeutralDensityFilters1",
            "numNeutralDensityFilters2"
          ]
        },
        "neutralDensityFilterTransmissions": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The transmission of the nth neutral density filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "neutralDensityFilterTransmissionsUnc": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "This is the uncertainty in the transmission for the nth filter. Must be present for all values n=1 to numNeutralDensityFilters, in incrementing order of n, and for no other values of n.",
          "example": [
            1.1,
            2.1,
            3.1
          ]
        },
        "gain": {
          "type": "number",
          "format": "double",
          "description": "Some sensors have gain settings. This value is the gain used during the observation in units e-/ADU. If no gain is used, the value = 1.",
          "example": 234.2
        },
        "ifov": {
          "type": "number",
          "format": "double",
          "description": "Sensor instantaneous field of view (ratio of pixel pitch to focal length).",
          "example": 0.2
        },
        "pixelArrayWidth": {
          "type": "integer",
          "format": "int16",
          "description": "Pixel array size (width) in pixels.",
          "example": 12
        },
        "pixelArrayHeight": {
          "type": "integer",
          "format": "int16",
          "description": "Pixel array size (height) in pixels.",
          "example": 23
        },
        "pixelMin": {
          "type": "integer",
          "format": "int16",
          "description": "Minimum valid pixel value, this is typically 0.",
          "example": 12
        },
        "pixelMax": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum valid pixel value, this is defined as 2^(number of bits per pixel). For example, a CCD with 8-bitpixels, would have a maximum valid pixel value of 2^8 = 256. This can represent the saturation value of the detector, but some sensors will saturate at a value significantly lower than full well depth. This is the analog-to-digital conversion (ADC) saturation value.",
          "example": 256
        },
        "centroidRow": {
          "type": "number",
          "format": "double",
          "description": "Observed centroid row number on the focal plane in pixels (0 is top edge, 0.5 is center of pixels along top of image).",
          "example": 0.1
        },
        "centroidColumn": {
          "type": "number",
          "format": "double",
          "description": "Observed centroid column number on the focal plane in pixels (0 is left edge, 0.5 is center of pixels along left of image).",
          "example": 0.5
        },
        "rowVariance": {
          "type": "number",
          "format": "double",
          "description": "Spatial variance of image distribution in vertical direction measured in pixels squared.",
          "example": 0.1
        },
        "columnVariance": {
          "type": "number",
          "format": "double",
          "description": "Spatial variance of image distribution in horizontal direction measured in pixels squared.",
          "example": 0.1
        },
        "rowColCov": {
          "type": "number",
          "format": "double",
          "description": "Spatial covariance of image distribution across horizontal and vertical directions measured in pixels squared.",
          "example": 0.01
        },
        "distFromStreakCenter": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "An array of measurements that correspond to the distance from the streak center measured from the optical image in pixels that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
          "example": [
            -127.153,
            -126.153,
            -125.153
          ]
        },
        "surfBrightness": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "An array of surface brightness measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
          "example": [
            21.01,
            21.382,
            21.725
          ]
        },
        "surfBrightnessUnc": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "An array of surface brightness uncertainty measurements in magnitudes per square arcsecond from the optical image that show change over an interval of time. The array length is dependent on the length of the streak. The distFromStreakCenter, surfBrightness, and surfBrightnessUnc arrays will match in size.",
          "example": [
            0.165,
            0.165,
            0.165
          ]
        },
        "timesUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty in the times reported in UTC in seconds.",
          "example": 13.1
        },
        "ccdTemp": {
          "type": "number",
          "format": "double",
          "description": "Operating temperature of CCD recorded during exposure or measured during calibrations in K.",
          "example": 123.4
        },
        "currentSpectralFilterNum": {
          "type": "integer",
          "format": "int16",
          "description": "The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter given in the corresponding spectralFilterNames.",
          "example": 23
        },
        "currentNeutralDensityFilterNum": {
          "type": "integer",
          "format": "int16",
          "description": "The reference number n, in neutralDensityFilters for the currently used neutral density filter.",
          "example": 3
        },
        "binningHoriz": {
          "type": "integer",
          "format": "int16",
          "description": "The number of pixels binned horizontally.",
          "example": 12
        },
        "binningVert": {
          "type": "integer",
          "format": "int16",
          "description": "The number of pixels binned vertically.",
          "example": 14
        },
        "pcalNumStars": {
          "type": "integer",
          "format": "int32",
          "description": "Number of stars used in photometric fit count.",
          "example": 23
        },
        "ccdObjPosX": {
          "type": "number",
          "format": "double",
          "description": "The x centroid position on the CCD of the target object in pixels.",
          "example": 123.3
        },
        "ccdObjPosY": {
          "type": "number",
          "format": "double",
          "description": "The y centroid position on the CCD of the target object in pixels.",
          "example": 321.4
        },
        "ccdObjWidth": {
          "type": "number",
          "format": "double",
          "description": "This is the pixel width of the target. This is either a frame-by-frame measurement or a constant point spread function or synthetic aperture used in the extraction.",
          "example": 133.2
        },
        "backgroundSignal": {
          "type": "number",
          "format": "double",
          "description": "This is the background signal at or in the vicinity of the radiometric source position. Specifically, this is the average background count level (DN/pixel) divided by the exposure time in seconds of the background pixels used in the photometric extraction. DN/pixel/sec.",
          "example": 4134.1
        },
        "backgroundSignalUnc": {
          "type": "number",
          "format": "double",
          "description": "Estimated 1-sigma uncertainty in the background signal at or in the vicinity of the radiometric source position. DN/pixel/sec.",
          "example": 123.2
        },
        "peakApertureCount": {
          "type": "number",
          "format": "double",
          "description": "Peak Aperture Raw Counts is the value of the peak pixel in the real or synthetic aperture containing the target signal.",
          "example": 123.2
        },
        "peakBackgroundCount": {
          "type": "integer",
          "format": "int32",
          "description": "Peak Background Raw Counts is the largest pixel value used in background signal.",
          "example": 321
        },
        "snrEst": {
          "type": "number",
          "format": "double",
          "description": "Estimated signal-to-noise ratio (SNR) for the total radiometric signal. Under some algorithms, this can be a constant per target (not per observation). Note: this SNR applies to the total signal of the radiometric source (i.e., Net_Obj_Sig with units DN/sec), not to be confused with the SNR of the signal in the peak pixel (i.e., DN/pixel/sec).",
          "example": 13.4
        },
        "magInstrumental": {
          "type": "number",
          "format": "double",
          "description": "Instrumental magnitude of a sensor before corrections are applied for atmosphere or to transform to standard magnitude scale.",
          "example": 123.3
        },
        "magInstrumentalUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty in the instrumental magnitude.",
          "example": 123.3
        },
        "opticalCrossSection": {
          "type": "number",
          "format": "double",
          "description": "Optical Cross Section computed in units m(2)/ster.",
          "example": 123.3
        },
        "opticalCrossSectionUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty in Optical Cross Section computed in units m(2)/ster.",
          "example": 123.3
        },
        "sunStatePosX": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km.",
          "example": 123.3
        },
        "sunStatePosY": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km.",
          "example": 123.3
        },
        "sunStatePosZ": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km.",
          "example": 123.3
        },
        "sunStateVelX": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
          "example": 123.3
        },
        "sunStateVelY": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
          "example": 123.3
        },
        "sunStateVelZ": {
          "type": "number",
          "format": "double",
          "description": "Sun state vector in ECI J2000 coordinate frame in km/sec.",
          "example": 123.3
        },
        "numCatalogStars": {
          "type": "integer",
          "format": "int16",
          "description": "Number of catalog stars in the detector field of view (FOV) with the target object. Can be 0 for narrow FOV sensors.",
          "example": 123
        },
        "numDetectedStars": {
          "type": "integer",
          "format": "int16",
          "description": "Number of detected stars in the FOV with the target object. Helps identify frames with clouds.",
          "example": 123
        },
        "numCorrelatedStars": {
          "type": "integer",
          "format": "int16",
          "description": "Number of correlated stars in the FOV with the target object. Can be 0 for narrow FOV sensors.",
          "example": 123
        },
        "predictedRaUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty of predicted Right Ascension of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
          "example": 123.2
        },
        "predictedDeclinationUnc": {
          "type": "number",
          "format": "double",
          "description": "Uncertainty of Predicted Declination of the Target object from the frame of reference of the sensor (J2000, geocentric velocity aberration). SGP4 and VCMs produce geocentric origin and velocity aberration and subtracting the sensor geocentric position of the sensor places in its reference frame.",
          "example": 123.2
        },
        "raCov": {
          "type": "number",
          "format": "double",
          "description": "Covariance (x^2) in measured Right Ascension (X) in deg^2.",
          "example": 123.2
        },
        "declinationCov": {
          "type": "number",
          "format": "double",
          "description": "Covariance (Y^2) in measured declination (Y) in deg^2.",
          "example": 123.2
        },
        "raDeclinationCov": {
          "type": "number",
          "format": "double",
          "description": "Covariance (XY) in measured ra/declination (XY) in deg^2.",
          "example": 123.2
        },
        "acalCrPixX": {
          "type": "number",
          "format": "double",
          "description": "World Coordinate System (WCS) X pixel origin in astrometric fit.",
          "example": 123.2
        },
        "acalCrPixY": {
          "type": "number",
          "format": "double",
          "description": "World Coordinate System (WCS) Y pixel origin in astrometric fit.",
          "example": 123.2
        },
        "acalCrValX": {
          "type": "number",
          "format": "double",
          "description": "World Coordinate System (WCS) equatorial coordinate X origin corresponding to CRPIX in astrometric fit in degrees.",
          "example": 123.2
        },
        "acalCrValY": {
          "type": "number",
          "format": "double",
          "description": "World Coordinate System (WCS) equatorial coordinate Y origin corresponding to CRPIX in astrometric fit in degrees.",
          "example": 123.2
        },
        "acalNumStars": {
          "type": "integer",
          "format": "int16",
          "description": "Number of stars used in astrometric fit.",
          "example": 123
        },
        "objSunRange": {
          "type": "number",
          "format": "double",
          "description": "Distance from the target object to the sun during the observation in meters.",
          "example": 123.2
        },
        "phaseAngBisect": {
          "type": "number",
          "format": "double",
          "description": "Solar phase angle bisector vector. The vector that bisects the solar phase angle. The phase angle bisector is the angle that is << of the value in #48. Then calculate the point on the RA/DEC (ECI J2000.0) sphere that a vector at this angle would intersect.",
          "example": 123.2
        },
        "solarDiskFrac": {
          "type": "number",
          "format": "double",
          "description": "Fraction of the sun that is illuminating the target object. This indicates if the target is in the Earth’s penumbra or umbra. (It is 0 when object is in umbra and 1 when object is fully illuminated.).",
          "example": 123.2
        },
        "toes": {
          "type": "number",
          "format": "double",
          "description": "Time off element set reported in seconds.",
          "example": 123.2
        },
        "does": {
          "type": "number",
          "format": "double",
          "description": "Angle off element set reported in degrees.",
          "example": 123.2
        },
        "source": {
          "type": "string",
          "description": "Source of the data, will be set to EOObservation source if blank.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "detectedCalsatBoolean": {
          "type": "boolean",
          "description": "Boolean of whether detected satellite has precision ephemeris available at time near exposure to image processing pipeline"
        },
        "residualRightAscensionArcS": {
          "type": "number",
          "description": "Difference in observed right ascension observation (in arcseconds) made by image processing pipeline  and predicted right ascension"
        },
        "residualDeclinationArcS": {
          "type": "number",
          "description": "Difference in observed declination observation (in arcseconds) made by image processing pipeline  and predicted declination"
        },
        "rightAscensionCorrectionDeg": {
          "type": "number",
          "description": "Applied correction to RA (degrees)."
        },
        "declinationCorrectionDeg": {
          "type": "number",
          "description": "Applied correction to DEC (degrees)."
        },
        "snrEstUnc": {
          "type": "number",
          "description": "Uncertainty of SNR estimate (unitless)."
        }
      },
      "type": "object",
      "title": "EOObservationDetails",
      "description": "Model representation of additional detailed observation data for electro-optical based sensor phenomenologies."
    },
    "WorldCoordinateSystem": {
      "properties": {
        "xvalPixelReference": {
          "type": "number",
          "format": "double",
          "description": "X reference pixel",
          "example": 256
        },
        "yvalPixelReference": {
          "type": "number",
          "format": "double",
          "description": "Y reference pixel",
          "example": 256
        },
        "rightAscensionReference": {
          "type": "number",
          "format": "double",
          "description": "RA of reference point",
          "example": 1.1
        },
        "declinationReference": {
          "type": "number",
          "format": "double",
          "description": "DEC of reference point",
          "example": 1.1
        },
        "xvalProjectionType": {
          "$ref": "#/components/schemas/ProjectionType",
          "description": "TAN (gnomic) projection + SIP distortions",
          "example": "RA---TAN-SIP"
        },
        "yvalProjectionType": {
          "$ref": "#/components/schemas/ProjectionType",
          "description": "TAN (gnomic) projection + SIP distortions",
          "example": "DEC---TAN-SIP"
        },
        "coordTransformOneOne": {
          "type": "number",
          "format": "double",
          "description": "(1,1) element of coordinate transformation matrix",
          "example": 1.1
        },
        "coordTransformOneTwo": {
          "type": "number",
          "format": "double",
          "description": "(1,2) element of coordinate transformation matrix",
          "example": 1.1
        },
        "coordTransformTwoOne": {
          "type": "number",
          "format": "double",
          "description": "(2,1) element of coordinate transformation matrix",
          "example": 1.1
        },
        "coordTransformTwoTwo": {
          "type": "number",
          "format": "double",
          "description": "(2,2) element of coordinate transformation matrix",
          "example": 1.1
        },
        "imageHeight": {
          "type": "number",
          "format": "double",
          "description": "Height of frame in pixels",
          "example": 512
        },
        "imageWidth": {
          "type": "number",
          "format": "double",
          "description": "Width of frame in pixels",
          "example": 512
        },
        "xvalUnit": {
          "$ref": "#/components/schemas/PixelScaleUnitType",
          "description": "X Pixel scale units  ",
          "example": "deg"
        },
        "yvalUnit": {
          "$ref": "#/components/schemas/PixelScaleUnitType",
          "description": "Y pixel scale units",
          "example": "DEGREE"
        },
        "distortionPolynomialOrder": {
          "type": "number",
          "format": "double",
          "description": "Order of astrometric distortion polynomial used to fit image",
          "example": 512
        }
      },
      "type": "object",
      "title": "WorldCoordinateSystem"
    },
    "Intent": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "INTENT-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "some.user"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "example": "OPS1"
        },
        "dataMode": {
          "type": "string",
          "enum": [
            "REAL",
            "TEST",
            "SIMULATED",
            "EXERCISE"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "idObjective": {
          "type": "string",
          "example": "REF-OBJECTIVE-ID"
        },
        "idRequest": {
          "type": "string",
          "description": "Unique identifier of the request associated with this response.",
          "example": "REF-REQUEST-ID"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the target on-orbit object for this request.",
          "example": "REF-ONORBIT-ID"
        },
        "satNo": {
          "type": "integer",
          "description": "Satellite/catalog number of the target on-orbit object for this request.",
          "example": 101
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by the data source to indicate the target object of this request. This may be an internal identifier and not necessarily map to a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "idElset": {
          "type": "string",
          "description": "ID of the UDL Elset of the object associated with this request.",
          "example": "REF-ELSET-ID"
        },
        "idStateVector": {
          "type": "string",
          "description": "ID of the UDL State Vector of the object or central vector associated with this request.",
          "example": "STATEVECTOR-ID"
        },
        "currentStatus": {
          "type": "string",
          "enum": [
            "NEW",
            "PROCESSING",
            "TENTATIVELY_SCHEDULED",
            "SCHEDULED",
            "SENT",
            "FAILED",
            "COMPLETED",
            "CANCELLED"
          ]
        },
        "updateList": {
          "items": {
            "$ref": "#/components/schemas/IntentUpdate"
          },
          "type": "array"
        },
        "priority": {
          "type": "integer",
          "description": "Smaller integers indicate higher priority.",
          "example": 1
        },
        "intentObservationParameters": {
          "$ref": "#/components/schemas/IntentObservationParameters"
        },
        "constraints": {
          "$ref": "#/components/schemas/IntentConstraints"
        }
      },
      "type": "object",
      "title": "Intent"
    },
    "IntentUpdate": {
      "properties": {
        "id": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system",
          "example": "some.user"
        },
        "idIntent": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updateType": {
          "type": "string"
        },
        "updateReason": {
          "type": "string"
        }
      },
      "type": "object",
      "title": "IntentUpdate",
      "description": "Contains metadata about an intent update, including status and reason."
    },
    "IntentObservationParameters": {
      "properties": {
        "frameType": {
          "type": "string",
          "enum": [
            "LIGHT",
            "BIAS",
            "DARK",
            "FLAT"
          ],
          "default": "LIGHT"
        },
        "gainDB": {
          "type": "number",
          "description": "gain setting for this intent. Units in dB"
        },
        "filterName": {
          "type": "string",
          "description": "Optical filter used to filter out and measure specific bands of light, maps to Instrument FilterTypeList",
          "example": "OPEN or BLUE"
        },
        "numFrames": {
          "type": "integer",
          "example": 6
        },
        "integrationTimeS": {
          "type": "number",
          "description": "Amount of time to leave the shutter open, Units in seconds"
        },
        "predictedVisualMagnitude": {
          "type": "number",
          "description": "Predicted visual magnitude of the target associated with this collect request.",
          "example": 15
        },
        "binning": {
          "type": "integer",
          "description": "Number of pixels to average into a single pixel in the resulting frame.",
          "example": 4
        },
        "trackType": {
          "type": "string",
          "enum": [
            "RATE_TRACK",
            "SIDEREAL",
            "RATE_TRACK_SIDEREAL",
            "SOI",
            "SEARCH",
            "VOLUME_SEARCH",
            "DIRECTED_SEARCH"
          ]
        },
        "frequencyHz": {
          "type": "number",
          "description": "Center frequency for the RF collection. This is the primary frequency  of interest around which the collection will be centered. This should be  specified as the RF (not baseband) frequency. Units in Hz."
        },
        "collectionTimeS": {
          "type": "number",
          "description": "Duration of the RF data collection/recording. This determines the total  time spent collecting complex (I/Q) samples. Units in seconds."
        },
        "bandwidthHz": {
          "type": "number",
          "description": "Frequency bandwidth of the collection. This specifies the range of frequencies  to collect around the center frequency. Units in Hz."
        }
      },
      "type": "object",
      "title": "IntentObservationParameters"
    },
    "IntentConstraints": {
      "properties": {
        "sensorNameList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of sensor names hopefully in the Belief state"
        },
        "sensorTypeList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of sensor types required for this constraint"
        },
        "instrumentNameList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of Instrument names hopefully in the Belief state"
        },
        "instrumentTypeList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of allowable instrument types."
        },
        "minDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Earliest time to schedule intent, Units are in ISO 8601 UTC format.\"",
          "example": "1950-01-01T16:00:00.123Z"
        },
        "maxDateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Latest time to schedule intent, Units are in ISO 8601 UTC format.\"",
          "example": "2120-01-01T16:00:00.123Z"
        },
        "extra": {
          "type": "object",
          "description": "Container for experimental constraint data not yet formally in the schema"
        }
      },
      "type": "object",
      "title": "IntentConstraints"
    },
    "Notification": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "NOTIFICATION-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "msgType": {
          "type": "string",
          "description": "Source provided message type.",
          "example": "msgType"
        },
        "msgBody": {
          "type": "string",
          "description": "The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.",
          "example": "msgBody"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.",
          "example": [
            "TAG1",
            "TAG2"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date and time the notification was created, auto-generated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "The user that created the notification.",
          "readOnly": true,
          "example": "some.user"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "msgType",
        "msgBody",
        "dataMode",
        "source"
      ],
      "title": "Notification",
      "description": "Model representation of client generated notification data.  Contains a message type and message body field to store notification information."
    },
    "MissedObservation": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        }
      },
      "type": "object",
      "title": "MissedObservation"
    },
    "ManeuverDetection": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        }
      },
      "type": "object",
      "title": "ManeuverDetection"
    },
    "NewLaunch": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        }
      },
      "type": "object",
      "title": "NewLaunch"
    },
    "Deployment": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        },
        "headcount": {
          "type": "integer",
          "description": "The number of deployments observed for this event"
        }
      },
      "type": "object",
      "title": "Deployment"
    },
    "Articulation": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        },
        "notes": {
          "type": "string",
          "description": "The description of the change in Articulation observed"
        }
      },
      "type": "object",
      "title": "Articulation"
    },
    "Orientation": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        },
        "xPose": {
          "type": "number"
        },
        "yPose": {
          "type": "number"
        },
        "zPose": {
          "type": "number"
        }
      },
      "type": "object",
      "title": "Orientation"
    },
    "TransmissionDetection": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (elsets, state vectors, etc) UUIDs associated with the IaW. See the associated sourcedDataTypes array for the specific types of data for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "SOURCEDDATA-ID",
            "SOURCEDDATA-ID"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data types associated with the IaW",
          "example": [
            "EO",
            "RADAR"
          ]
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        },
        "currentlyTransmittingBool": {
          "type": "boolean",
          "description": "True if a transmission was detected, false if something was that transmitting no longer is."
        },
        "channelChange": {
          "type": "boolean",
          "description": "Detected change from one channel to a new channel"
        },
        "previousChannel": {
          "type": "number"
        },
        "newChannel": {
          "type": "number"
        },
        "frequencyHz": {
          "type": "number",
          "description": "frequency observed in hertz"
        },
        "powerWatts": {
          "type": "number",
          "description": "power detected in watts."
        }
      },
      "type": "object",
      "title": "TransmissionDetection"
    },
    "Breakup": {
      "properties": {
        "type": {
          "type": "string"
        },
        "idOnOrbit": {
          "type": "string"
        },
        "idRequest": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "The plain-text name of this maneuver detection.",
          "example": "Hello IaW"
        },
        "explosionDetected": {
          "type": "boolean",
          "description": "Bool if an explosion was detected"
        },
        "sheddingDetected": {
          "type": "boolean",
          "description": "Bool if shedding was detected"
        }
      }
    },
    "Objective": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "OBJECTIVE-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "some.user"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "example": "OPS1"
        },
        "dataMode": {
          "type": "string",
          "enum": [
            "REAL",
            "TEST",
            "SIMULATED",
            "EXERCISE"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "name": {
          "type": "string",
          "description": "name of objective."
        },
        "type": {
          "type": "string",
          "description": "name of objective definition."
        },
        "state": {
          "type": "string",
          "enum": [
            "PENDING",
            "RUNNING",
            "PAUSED",
            "TERMINATED",
            "COMPLETED",
            "FAILED"
          ],
          "description": "The current state of this objective."
        },
        "params": {
          "type": "object",
          "description": "The objective parameters."
        }
      }
    },
    "Onorbit": {
      "properties": {
        "idOnOrbit": {
          "type": "string",
          "description": "For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.",
          "example": "ONORBIT-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/Catalog number of the target on-orbit object.",
          "example": 1
        },
        "commonName": {
          "type": "string",
          "description": "Common name of the on-orbit object.",
          "example": "Example common name"
        },
        "constellation": {
          "type": "string",
          "description": "Constellation to which this satellite belongs.",
          "example": "Big Dipper"
        },
        "intlDes": {
          "type": "string",
          "description": "International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.",
          "example": "2021123ABC"
        },
        "launchDate": {
          "type": "string",
          "format": "date",
          "description": "Date of launch.",
          "example": "2018-01-01"
        },
        "decayDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date of decay.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "objectType": {
          "$ref": "#/components/schemas/ObjectType"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "missionNumber": {
          "type": "string",
          "description": "Mission number of the on-orbit object.",
          "example": "Expedition 1"
        },
        "category": {
          "$ref": "#/components/schemas/Category"
        },
        "lifetimeYears": {
          "type": "integer",
          "format": "int32",
          "description": "Estimated lifetime of the on-orbit payload, if known.",
          "example": 10
        },
        "altName": {
          "type": "string",
          "description": "Alternate name of the on-orbit object.",
          "example": "Alternate Name"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "launchSiteId": {
          "type": "string",
          "description": "Id of the associated launchSite entity.",
          "example": "LAUNCHSITE-ID"
        },
        "onorbitDetails": {
          "items": {
            "$ref": "#/components/schemas/OnorbitDetails"
          },
          "type": "array",
          "description": "Read-only collection of details for this on-orbit object.",
          "readOnly": true
        },
        "countryCode": {
          "type": "string",
          "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
          "example": "US"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "satNo",
        "source",
        "dataMode"
      ],
      "title": "Onorbit",
      "description": "Model object representing on-orbit objects or satellites in the system."
    },
    "RadarObservation": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "RADAROBSERVATION-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "obTime": {
          "type": "string",
          "format": "date-time",
          "description": "Ob detection time in ISO 8601 UTC with microsecond precision.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the target on-orbit object, if correlated.",
          "readOnly": true,
          "example": "ONORBIT-ID"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the reporting sensor.",
          "example": "SENSOR-ID"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/Catalog number of the target on-orbit object.",
          "example": 1
        },
        "taskId": {
          "type": "string",
          "description": "Optional identifier to indicate the specific tasking which produced this observation.",
          "example": "TASK-ID"
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "TRANSACTION-ID"
        },
        "trackId": {
          "type": "string",
          "description": "Optional identifier of the track to which this observation belongs.",
          "example": "TRACK-ID"
        },
        "obPosition": {
          "type": "string",
          "description": "The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.",
          "example": "FIRST"
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "origSensorId": {
          "type": "string",
          "description": "Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.",
          "example": "ORIGSENSOR-ID"
        },
        "uct": {
          "type": "boolean",
          "description": "Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
          "example": true
        },
        "azimuth": {
          "type": "number",
          "format": "double",
          "description": "azimuth angle in degrees and topocentric frame.",
          "example": 45.23
        },
        "azimuthMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the azimuth value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "azimuthUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.",
          "example": 45.23
        },
        "azimuthBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor azimuth angle bias in degrees.",
          "example": 45.23
        },
        "azimuthRate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of the line of sight azimuth in degrees per second.",
          "example": 1.23
        },
        "elevation": {
          "type": "number",
          "format": "double",
          "description": "Line of sight elevation in degrees and topocentric frame.",
          "example": 45.23
        },
        "elevationMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the elevation value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "elevationUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the line of sight elevation angle measurement, in degrees.",
          "example": 1.23
        },
        "elevationBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor elevation bias in degrees.",
          "example": 1.23
        },
        "elevationRate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of the line of sight elevation in degrees per second.",
          "example": 1.23
        },
        "range": {
          "type": "number",
          "format": "double",
          "description": "Target range in km.",
          "example": 100.23
        },
        "rangeMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the range value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "rangeAccel": {
          "type": "number",
          "format": "double",
          "description": "Range accelaration in km/s2.",
          "example": 10.23
        },
        "rangeAccelUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).",
          "example": 1.23
        },
        "rangeUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the range measurement, in kilometers.",
          "example": 1.23
        },
        "rangeBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor range bias in km.",
          "example": 1.23
        },
        "rangeRate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of the line of sight range in km/sec.",
          "example": 1.23
        },
        "rangeRateMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the rangeRate value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "rangeRateUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the range rate measurement, in kilometers/second.",
          "example": 0.5
        },
        "doppler": {
          "type": "number",
          "format": "double",
          "description": "Corrected doppler measurement in meters per second.",
          "example": 10.23
        },
        "dopplerUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma uncertainty in the corrected doppler measurement, in meters/second.",
          "example": 1.23
        },
        "ra": {
          "type": "number",
          "format": "double",
          "description": "Line of sight right ascension in degrees and J2000 coordinate frame.",
          "example": 1.23
        },
        "raMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the ra value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "declination": {
          "type": "number",
          "format": "double",
          "description": "Line of sight declination angle in degrees and J2000 coordinate frame.",
          "example": 10.23
        },
        "declinationMeasured": {
          "type": "boolean",
          "description": "Optional flag indicating whether the declination value is measured (true) or computed (false). If null, consumers may consult the data provider for information regarding whether the corresponding value is computed or measured.",
          "example": true
        },
        "x": {
          "type": "number",
          "format": "double",
          "description": "X position of target in km in J2000 coordinate frame.",
          "example": 50.23
        },
        "y": {
          "type": "number",
          "format": "double",
          "description": "Y position of target in km in J2000 coordinate frame.",
          "example": 50.23
        },
        "z": {
          "type": "number",
          "format": "double",
          "description": "Z position of target in km in J2000 coordinate frame.",
          "example": 50.23
        },
        "xvel": {
          "type": "number",
          "format": "double",
          "description": "X velocity of target in km/sec in J2000 coordinate frame.",
          "example": 1.23
        },
        "yvel": {
          "type": "number",
          "format": "double",
          "description": "Y velocity of target in km/sec in J2000 coordinate frame.",
          "example": 5.23
        },
        "zvel": {
          "type": "number",
          "format": "double",
          "description": "Z velocity of target in km/sec in J2000 coordinate frame.",
          "example": 5.23
        },
        "senx": {
          "type": "number",
          "format": "double",
          "description": "Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
          "example": 45.23
        },
        "seny": {
          "type": "number",
          "format": "double",
          "description": "Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
          "example": 40.23
        },
        "senz": {
          "type": "number",
          "format": "double",
          "description": "Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.",
          "example": 35.23
        },
        "rcs": {
          "type": "number",
          "format": "double",
          "description": "Radar cross section in meters squared for polarization principal.",
          "example": 100.23
        },
        "rcsUnc": {
          "type": "number",
          "format": "double",
          "description": "one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.",
          "example": 1.23
        },
        "orthogonalRcs": {
          "type": "number",
          "format": "double",
          "description": "Radar cross section in meters squared for orthogonal polarization.",
          "example": 1.23
        },
        "orthogonalRcsUnc": {
          "type": "number",
          "format": "double",
          "description": "one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.",
          "example": 10.23
        },
        "snr": {
          "type": "number",
          "format": "double",
          "description": "Signal to noise ratio, in dB.",
          "example": 0.5
        },
        "trackingState": {
          "type": "string",
          "description": "The beam type (or tracking state) in use at the time of collection of this observation. Values include:\n\nINIT ACQ WITH INIT VALUES: Initial acquisition based on predefined initial values such as position, velocity, or other specific parameters.\n\nINIT ACQ: Initial acquisition when no prior information or initial values such as position or velocity are available.\n\nTRACKING SINGLE BEAM: Continuously tracks and monitors a single target using one specific radar beam.\n\nTRACKING SEQUENTIAL ROVING:  Sequentially tracks different targets or areas by \"roving\" from one sector to the next in a systematic order.\n\nSELF ACQ WITH INIT VALUES: Autonomously acquires targets using predefined starting parameters or initial values.\n\nSELF ACQ: Automatically detects and locks onto targets without the need for predefined initial settings.\n\nNON-TRACKING: Non-tracking.",
          "example": "INIT ACQ"
        },
        "beam": {
          "type": "number",
          "format": "double",
          "description": "ID of the beam that produced this observation.",
          "example": 1.23
        },
        "timingBias": {
          "type": "number",
          "format": "double",
          "description": "Sensor timing bias in seconds.",
          "example": 1.23
        },
        "rawFileURI": {
          "type": "string",
          "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
          "example": "rawFileURI"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "TAG1",
            "TAG2"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "senReferenceFrame": {
          "$ref": "#/components/schemas/SenReferenceFrame"
        },
        "descriptor": {
          "type": "string",
          "description": "Optional source-provided and searchable metadata or descriptor of the data.",
          "example": "descriptor"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        },
        "type": {
          "type": "string",
          "description": "Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).",
          "readOnly": true,
          "example": "RADAR"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "coordinateSystem": {
          "type": "string",
          "description": "Coordinate system"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "obTime",
        "source",
        "dataMode"
      ],
      "title": "RadarObservation",
      "description": "Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider."
    },
    "Sensor": {
      "properties": {
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "SENSOR-ID"
        },
        "sensorName": {
          "type": "string",
          "description": "Unique name of this sensor.",
          "example": "SENSOR_NAME"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "sensorNumber": {
          "type": "integer",
          "format": "int32",
          "description": "Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.",
          "example": 1234
        },
        "shortName": {
          "type": "string",
          "description": "Optional short name for the sensor.",
          "example": "SNR-1"
        },
        "dataControl": {
          "type": "string",
          "description": "Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.",
          "example": "observations"
        },
        "afId": {
          "type": "string",
          "description": "Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.",
          "example": "AF-ID"
        },
        "asrType": {
          "type": "string",
          "description": "The sensor type at the site. Optional field, intended primarily for ASRs.",
          "example": "SENSOR_TYPE"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "some.user"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "active": {
          "type": "boolean",
          "description": "Optional flag indicating if the sensor is active.",
          "example": true
        },
        "sensorcharacteristics": {
          "items": {
            "$ref": "#/components/schemas/SensorcharacteristicsItem"
          },
          "type": "array",
          "description": "Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor."
        },
        "sensorStats": {
          "items": {
            "$ref": "#/components/schemas/SensorStats"
          },
          "type": "array",
          "description": "Collection of SensorStats which contain statistics of a sensor."
        },
        "sensorlimitsCollection": {
          "items": {
            "$ref": "#/components/schemas/SensorlimitsCollectionItem"
          },
          "type": "array",
          "description": "Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects."
        },
        "udlEntity": {
          "$ref": "#/components/schemas/UdlEntity"
        },
        "idEntity": {
          "type": "string",
          "description": "Unique identifier of the parent entity. idEntity is required for Put.",
          "example": "ENTITY-ID"
        },
        "sensorObservationType": {
          "$ref": "#/components/schemas/Sensorobservationtype"
        },
        "sensorType": {
          "$ref": "#/components/schemas/Sensortype"
        }
      },
      "type": "object",
      "required": [
        "sensorName",
        "classificationMarking",
        "source",
        "dataMode"
      ],
      "title": "Sensor",
      "description": "Model representation of observation data for electro-optical based sensor phenomenologies."
    },
    "SensorlimitsCollectionItem": {
      "properties": {
        "idSensorLimits": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "SENSORLIMITS-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "upperLeftAzimuthLimit": {
          "type": "number",
          "format": "double",
          "description": "Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).",
          "example": 1.23
        },
        "upperRightAzimuthLimit": {
          "type": "number",
          "format": "double",
          "description": "Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).",
          "example": 1.23
        },
        "lowerRightAzimuthLimit": {
          "type": "number",
          "format": "double",
          "description": "Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).",
          "example": 1.23
        },
        "lowerLeftAzimuthLimit": {
          "type": "number",
          "format": "double",
          "description": "Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).",
          "example": 1.23
        },
        "lowerLeftElevationLimit": {
          "type": "number",
          "format": "double",
          "description": "Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).",
          "example": 1.23
        },
        "upperLeftElevationLimit": {
          "type": "number",
          "format": "double",
          "description": "Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).",
          "example": 1.23
        },
        "lowerRightElevationLimit": {
          "type": "number",
          "format": "double",
          "description": "Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).",
          "example": 1.23
        },
        "upperRightElevationLimit": {
          "type": "number",
          "format": "double",
          "description": "Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).",
          "example": 1.23
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the target sensor object.",
          "example": "SENSORLIMITS-ID"
        },
        "minDeclination": {
          "type": "number",
          "description": "Minimum target declination, Units are Degrees."
        },
        "maxDeclination": {
          "type": "number",
          "description": "Maximum target declination, Units are Degrees."
        },
        "isExclusionZone": {
          "type": "boolean",
          "description": "Whether the limits define an exclusion zone."
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "source",
        "dataMode"
      ],
      "title": "SensorlimitsCollectionItem",
      "description": "Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects."
    },
    "SensorcharacteristicsItem": {
      "properties": {
        "readoutTimeS": {
          "type": "number",
          "format": "double",
          "description": "Readout time of instrument, In Seconds",
          "example": 3
        },
        "voltageStandingWaveRatioVolts": {
          "type": "number",
          "format": "double",
          "description": "VSWR (volts)"
        },
        "horizontalGainPatternDegList": {
          "items": {
            "type": "number",
            "maximum": 360,
            "minimum": 0,
            "format": "double"
          },
          "type": "array",
          "description": "Antenna gain pattern in horizontal plane from 0 to 359 degrees in 1 degree steps.",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "verticalGainPatternDegList": {
          "items": {
            "type": "number",
            "maximum": 360,
            "minimum": 0,
            "format": "double"
          },
          "type": "array",
          "description": "Antenna gain pattern in vertical plane from 0 to 359 degrees in 1 degree steps.",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "sampleRateS": {
          "type": "integer",
          "description": "Receiver samples/second"
        },
        "dataType": {
          "type": "string",
          "description": "Sample data type, e.g. complex 32-bit floating-point samples stored in little-endian",
          "example": "cf32_le"
        },
        "polarizationsList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "List of names of polarization options",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "crossPolarDiscriminationDb": {
          "type": "number",
          "format": "double",
          "description": "dB"
        },
        "stateEstimationCapabilities": {
          "items": {
            "$ref": "#/components/schemas/MachinaKeyValuePair"
          },
          "type": "array",
          "description": "Antennae Measurement DoF",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "initializationTimeS": {
          "type": "number",
          "format": "double",
          "description": "Time interval between switching instruments (seconds)"
        },
        "kvpList": {
          "items": {
            "$ref": "#/components/schemas/MachinaKeyValuePair"
          },
          "type": "array",
          "description": "A list of parameters in a key-value-pair format for this instrument type.",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "extendedObjectSensitivity": {
          "type": "number",
          "format": "double",
          "description": "erg/cm2/s/A/ster"
        },
        "maxBinning": {
          "type": "number",
          "format": "double",
          "description": "linear scale factor",
          "example": 4
        },
        "maxGain": {
          "type": "number",
          "format": "double",
          "example": 200
        },
        "pointSourceSensitivity": {
          "type": "number",
          "format": "double",
          "description": "erg/cm2/s/A",
          "example": 1
        },
        "setupTimeS": {
          "type": "number",
          "format": "double",
          "description": "Time in seconds to change port and focus, assume maximum time.",
          "example": 5
        },
        "zeroPointMagnitude": {
          "type": "number",
          "format": "double",
          "example": 1
        },
        "port": {
          "type": "number",
          "format": "double",
          "description": "May need depending on instrument",
          "example": 1
        },
        "spectralResolutionNm": {
          "type": "number",
          "format": "double",
          "description": "represented as R = lambda / d_lambda"
        },
        "stokesVectorList": {
          "items": {
            "type": "boolean"
          },
          "type": "array",
          "maxItems": 4,
          "minItems": 4,
          "description": "boolean array for [I,Q,U,V] availability.",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "deRotate": {
          "type": "boolean",
          "description": "deRotate boolean, defaults to false",
          "default": false
        },
        "defaultFilterIndex": {
          "type": "integer",
          "format": "number",
          "description": "Default index of list of filters to use if not provided.",
          "default": 0
        },
        "filterList": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-machina-entity-field": {
            "isElementCollection": true
          }
        },
        "defaultBinning": {
          "type": "number",
          "format": "double",
          "description": "linear scale factor",
          "example": 4
        },
        "defaultGain": {
          "type": "number",
          "format": "double",
          "description": "linear scale factor",
          "example": 4
        },
        "defaultIntegrationTimeS": {
          "type": "number",
          "format": "double",
          "description": "linear scale factor",
          "example": 4
        },
        "slewRateDegPerSec": {
          "type": "number",
          "format": "double",
          "description": "Slew Rate of Sensor, In Degrees Per Second",
          "example": 1
        },
        "gimbalSettleTimeS": {
          "type": "number",
          "format": "double",
          "description": "Settle time of Sensor, In Seconds",
          "example": 30
        },
        "meridianFlipTimeS": {
          "type": "number",
          "format": "double",
          "description": "Time to complete a meridian flip, in seconds",
          "default": 0,
          "example": 20
        },
        "azimuthPointingResolutionDeg": {
          "type": "number",
          "format": "double",
          "description": "Limiting precision of mount pointing (degrees)",
          "example": 0.01
        },
        "elevationPointingResolution": {
          "type": "number",
          "format": "double",
          "description": "Limiting precision of mount pointing (degrees)",
          "example": 0.01
        },
        "steerableBoolean": {
          "type": "boolean",
          "description": "Boolean for fixed isotropic antennas"
        },
        "referenceFrame": {
          "$ref": "#/components/schemas/ReferenceFrameType",
          "description": "The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be LLA."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "SENSORCHARACTERISTICS-ID"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the parent sensor.",
          "example": "SENSOR-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "magnitudeLimit": {
          "type": "number",
          "format": "double",
          "description": "Absolute magnitude acquisition limit for optical sensors.",
          "example": 23.5
        },
        "radarFrequency": {
          "type": "number",
          "format": "double",
          "description": "Radar frequency in hertz, of the sensor (if a radar sensor).",
          "example": 45300000000.1
        },
        "receiveGain": {
          "type": "number",
          "format": "double",
          "description": "Radar receive gain in decibels.",
          "example": 10.2
        },
        "hFOV": {
          "type": "number",
          "format": "double",
          "description": "Horizontal field of view, in degrees.",
          "example": 20.23
        },
        "vFOV": {
          "type": "number",
          "format": "double",
          "description": "Vertical field of view, in degrees.",
          "example": 20.23
        },
        "bandwidth": {
          "type": "number",
          "format": "double",
          "description": "The total bandwidth, in megahertz, about the radar center frequency.",
          "example": 100.23
        },
        "solarExclAngle": {
          "type": "number",
          "format": "double",
          "description": "Sensor and target position vector origins are at the center of the earth. The sun vector origin is at the target position and points toward the sun. Any value between 0 and 180 degrees is acceptable and is assumed to apply in both directions (i.e., a solar exclusion angle of 30 degrees is understood to mean no viewing for any angle between -30 deg and +30 deg).",
          "example": 50.5
        },
        "lunarExclAngle": {
          "type": "number",
          "format": "double",
          "description": "Lowest aspect angle of the full moon in degrees at which the sensor can achieve full performance.",
          "example": 45.2
        },
        "twilightAngle": {
          "type": "number",
          "format": "double",
          "description": "Twilight angle for ground-based optical sensors in degrees. A sensor cannot view targets until the sun is below the twilight angle relative to the local horizon. The sign of the angle is positive despite the sun elevation being negative after local sunset. Typical values for the twilight angle are civil twilight (6 degrees), nautical twilight (12 degrees), and astronomical twilight (18 degrees).",
          "example": 7.5
        },
        "receiveHorizBeamWidth": {
          "type": "number",
          "format": "double",
          "description": "Horizontal/azimuthal receive beamwidth for a radar in degrees.",
          "example": 75.3
        },
        "receiveVertBeamWidth": {
          "type": "number",
          "format": "double",
          "description": "Vertical/elevation receive beamwidth for a radar in degrees.",
          "example": 75.4
        },
        "minWavelength": {
          "type": "number",
          "format": "double",
          "description": "Minimum wavelength detectable by an optical sensor in micrometers.",
          "example": 1.23
        },
        "centerWavelength": {
          "type": "number",
          "format": "double",
          "description": "Weighted center wavelength for an optical sensor bandpass in micrometers. It is the center wavelength in a weighted integral sense, accounting for the sensitivity vs. wavelength curve for the sensor focal plane array.",
          "example": 4.56
        },
        "maxWavelength": {
          "type": "number",
          "format": "double",
          "description": "Maximum wavelength detectable by an optical sensor in micrometers.",
          "example": 7.89
        },
        "pixelInstantaneousFOV": {
          "type": "number",
          "format": "double",
          "description": "Angular field-of-view covered by one pixel in a focal plane array in microradians. The pixel is assumed to be a perfect square so that only a single value is required.",
          "example": 10.23
        },
        "minIntegrationTime": {
          "type": "number",
          "format": "double",
          "description": "Minimum integration time per image frame in seconds for an optical sensor.",
          "example": 0.3
        },
        "maxIntegrationTime": {
          "type": "number",
          "format": "double",
          "description": "Maximum integration time per image frame in seconds for an optical sensor.",
          "example": 1.1
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "earthShadowConstraint": {
          "type": "boolean"
        }
      },
      "type": "object",
      "required": [
        "idSensor",
        "classificationMarking",
        "source",
        "dataMode"
      ],
      "title": "SensorcharacteristicsItem",
      "description": "Model representation of characteristics and capabilities of a sensor."
    },
    "UdlEntity": {
      "properties": {
        "idEntity": {
          "type": "string",
          "description": "Unique identifier of the record.",
          "example": "ENTITY-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "type": {
          "$ref": "#/components/schemas/Entity_Type"
        },
        "idLocation": {
          "type": "string",
          "description": "Unique identifier of the entity location, if terrestrial/fixed.",
          "example": "LOCATION-ID"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "location": {
          "$ref": "#/components/schemas/Location"
        }
      },
      "type": "object",
      "required": [
        "name",
        "classificationMarking",
        "type",
        "source",
        "dataMode"
      ],
      "title": "UdlEntity",
      "description": "An entity is a generic representation of any object within a space/SSA system such as sensors, on-orbit objects, RF Emitters, space craft buses, etc. An entity can have an operating unit, a location (if terrestrial), and statuses."
    },
    "SkyImagery": {
      "properties": {
        "frameType": {
          "$ref": "#/components/schemas/FrameType"
        },
        "boresightRightAscensionDeg": {
          "type": "number",
          "format": "double",
          "description": "Right ascension in degrees of center of image from sensor pointing",
          "example": 321.123
        },
        "boresightDeclinationDeg": {
          "type": "number",
          "format": "double",
          "description": "Declination in degrees of center of image from sensor pointing",
          "example": 321.123
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "SKYIMAGERY-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Optional identifier of the target on-orbit object, if correlated.",
          "readOnly": true,
          "example": "44920"
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.",
          "example": "X15-23452"
        },
        "idSOISet": {
          "type": "string",
          "description": "Optional unique identifier of the SOI Observation Set associated with this image.",
          "example": "531093d0-e9b0-475b-687aeeefefd9"
        },
        "idAttitudeSet": {
          "type": "string",
          "description": "Optional identifier of the AttitudeSet data record describing the orientation of an object body.",
          "example": "d039ba29-52f4-4839-8a8f-e85fa416aec5"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique identifier of the reporting sensor.",
          "example": "420"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Catalog number of the target on-orbit object.",
          "example": 25544
        },
        "origSensorId": {
          "type": "string",
          "description": "Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.",
          "example": "origSensorId"
        },
        "senlat": {
          "type": "number",
          "format": "double",
          "description": "Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).",
          "example": -33.283048
        },
        "senlon": {
          "type": "number",
          "format": "double",
          "description": "Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).",
          "example": 149.372549
        },
        "senalt": {
          "type": "number",
          "format": "double",
          "description": "Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.",
          "example": 14.483619321
        },
        "senx": {
          "type": "number",
          "format": "double",
          "description": "Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
          "example": 14.52
        },
        "seny": {
          "type": "number",
          "format": "double",
          "description": "Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
          "example": 32.41
        },
        "senz": {
          "type": "number",
          "format": "double",
          "description": "Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.",
          "example": 376.12
        },
        "senQuat": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
          "example": [
            0.03,
            0.02,
            0.01,
            0.012
          ]
        },
        "senQuatDot": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.",
          "example": [
            0.03,
            0.02,
            0.01,
            0.012
          ]
        },
        "imageType": {
          "type": "string",
          "description": "The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP, MP4).",
          "example": "imageType"
        },
        "expStartTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the exposure, in ISO 8601 UTC format with microsecond precision.",
          "example": "2021-01-01T01:01:01.123456Z"
        },
        "expEndTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the exposure, in ISO 8601 UTC format with microsecond precision.",
          "example": "2021-01-01T01:01:01.123456Z"
        },
        "imageSourceInfo": {
          "type": "string",
          "description": "String that uniquely identifies the data source.",
          "example": "imageSourceInfo"
        },
        "topLeftStartAz": {
          "type": "number",
          "format": "double",
          "description": "The telescope pointing azimuth, in degrees, at the exposure start epoch.",
          "example": 146.321
        },
        "topLeftStartEl": {
          "type": "number",
          "format": "double",
          "description": "The telescope pointing elevation, in degrees, at the exposure start epoch.",
          "example": 146.321
        },
        "topLeftStopAz": {
          "type": "number",
          "format": "double",
          "description": "The telescope pointing azimuth, in degrees, at the exposure stop epoch.",
          "example": 3.7
        },
        "topLeftStopEl": {
          "type": "number",
          "format": "double",
          "description": "The telescope pointing elevation, in degrees, at the exposure stop epoch.",
          "example": 34.233
        },
        "imageSetId": {
          "type": "string",
          "description": "The user-defined set ID of a sequence of images.",
          "example": "imageSetId"
        },
        "imageSetLength": {
          "type": "integer",
          "format": "int32",
          "description": "The number of images in an image set.",
          "example": 9
        },
        "sequenceId": {
          "type": "integer",
          "format": "int32",
          "description": "The sequence ID of an image within an image set.",
          "example": 1
        },
        "frameFOVWidth": {
          "type": "number",
          "format": "double",
          "description": "Field Of View frame width, in degrees.",
          "example": 21.23
        },
        "frameFOVHeight": {
          "type": "number",
          "format": "double",
          "description": "Field Of View frame height, in degrees.",
          "example": 21.23
        },
        "pixelFOVWidth": {
          "type": "number",
          "format": "double",
          "description": "Field Of View pixel width, in degrees.",
          "example": 321.123
        },
        "pixelFOVHeight": {
          "type": "number",
          "format": "double",
          "description": "Field Of View pixel height, in degrees.",
          "example": 321.123
        },
        "frameWidthPixels": {
          "type": "integer",
          "format": "int32",
          "description": "Frame width of the image, in number of pixels.",
          "example": 1
        },
        "frameHeightPixels": {
          "type": "integer",
          "format": "int32",
          "description": "Frame height of the image, in number of pixels.",
          "example": 1
        },
        "pixelBitDepth": {
          "type": "integer",
          "format": "int32",
          "description": "Bit depth of the image, in number of pixels.",
          "example": 1
        },
        "annotationKey": {
          "type": "string",
          "description": "Reference to an annotation document associated with this image.",
          "example": "annotationKey"
        },
        "calibrationKey": {
          "type": "string",
          "description": "Reference to a calibration document associated with this image.",
          "example": "calibrationKey"
        },
        "filename": {
          "type": "string",
          "description": "Name of the uploaded image file.",
          "example": "filename.jpg"
        },
        "filesize": {
          "type": "integer",
          "format": "int64",
          "description": "Size of the image file, in bytes.",
          "example": 371945
        },
        "checksumValue": {
          "type": "string",
          "description": "MD5 value of the file. The ingest/create operation will automatically generate the value.",
          "readOnly": true,
          "example": "checksumValue"
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "PROVIDER_TAG1",
            "PROVIDER_TAG2"
          ]
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        },
        "description": {
          "type": "string",
          "description": "Optional name/description associated with this image.",
          "example": "description"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "eoObservations": {
          "items": {
            "$ref": "#/components/schemas/EOObservation"
          },
          "type": "array",
          "description": "Collection of linked EOObservations."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "example": "some.user"
        },
        "idRequest": {
          "type": "string",
          "description": "Unique identifier of the upstream request associated with this image, if available."
        },
        "integrationTime": {
          "type": "number",
          "description": "Image exposure (integration) time in seconds."
        },
        "objectDetections": {
          "items": {
            "$ref": "#/components/schemas/Detection"
          },
          "type": "array",
          "description": "Satellite detections produced by image processing."
        },
        "starDetections": {
          "items": {
            "$ref": "#/components/schemas/Detection"
          },
          "type": "array",
          "description": "Star detections produced by image processing."
        },
        "processed": {
          "type": "boolean",
          "description": "Whether this image has been processed."
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "imageType",
        "expStartTime",
        "source",
        "dataMode"
      ],
      "title": "SkyImagery",
      "description": "Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP, MP4). Binary content must be downloaded individually by ID using the 'getFile' operation."
    },
    "Detection": {
      "properties": {
        "xmin": {
          "type": "number",
          "description": "Minimum pixel of bounding box from left of image."
        },
        "xmax": {
          "type": "number",
          "description": "Maximum pixel of bounding box from left of image."
        },
        "ymin": {
          "type": "number",
          "description": "Maximum pixel of bounding box from top of image."
        },
        "ymax": {
          "type": "number",
          "description": "Minimum pixel of bounding box from top of image."
        },
        "confidence": {
          "type": "number",
          "maximum": 1,
          "minimum": 0,
          "description": "Confidence in [0, 1]."
        }
      },
      "type": "object",
      "title": "Detection",
      "description": "Contains the bounding box and confidence values for a detection."
    },
    "StateVector": {
      "properties": {
        "idStateVector": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "STATEVECTOR-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "epoch": {
          "type": "string",
          "format": "date-time",
          "description": "Time of validity for state vector in ISO 8601 UTC datetime format, with microsecond precision.",
          "example": "2018-01-01T16:00:00.123456Z"
        },
        "pedigree": {
          "type": "string",
          "description": "The pedigree of state vector, or methods used for its generation to include state update/orbit determination, propagation from another state, or a state from a calibration satellite (e.g. ORBIT_UPDATE, PROPAGATION, CALIBRATION, CONJUNCTION, FLIGHT_PLAN).",
          "example": "CONJUNCTION"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.",
          "readOnly": true,
          "example": "ONORBIT-ID"
        },
        "satNo": {
          "type": "integer",
          "format": "int32",
          "description": "Satellite/Catalog number of the target OnOrbit object.",
          "example": 12
        },
        "origObjectId": {
          "type": "string",
          "description": "Optional identifier provided by state vector source to indicate the target onorbit object of this state vector. This may be an internal identifier and not necessarily map to a valid satellite number.",
          "example": "ORIGOBJECT-ID"
        },
        "idOrbitDetermination": {
          "type": "string",
          "description": "Unique identifier of the OD solution record that produced this state vector. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queries as /udl/orbitdetermination/abc.",
          "example": "026dd511-8ba5-47d3-9909-836149f87686"
        },
        "uct": {
          "type": "boolean",
          "description": "Boolean indicating this state vector was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.",
          "example": true
        },
        "xpos": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
          "example": -1118.577381
        },
        "ypos": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
          "example": 3026.231084
        },
        "zpos": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z position of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
          "example": 6167.831808
        },
        "xvel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X velocity of target, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed.",
          "example": -4.25242784
        },
        "yvel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 5.291107434
        },
        "zvel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z velocity of target, in kilometers/second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": -3.356493869
        },
        "xaccel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": -2.12621392
        },
        "yaccel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": 2.645553717
        },
        "zaccel": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z acceleration of target, in kilometers/second^2, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.",
          "example": -1.06310696
        },
        "referenceFrame": {
          "$ref": "#/components/schemas/StateVector_ReferenceFrame"
        },
        "cov": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.  If the covReferenceFrame is null it is assumed to be J2000.\nThe array values (1-21) represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR&nbsp;&nbsp;\n\nx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1\n\ny&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;3\n\nz&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;6\n\nx'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;&nbsp;10\n\ny'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15\n\nz'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;\n\nThe cov array should contain only the lower left triangle values from top left down to bottom right, in order.\n\nIf additional covariance terms are included for DRAG, SRP, and/or THRUST, the matrix can be extended with the following order of elements:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;DRG&nbsp;&nbsp;&nbsp;&nbsp;SRP&nbsp;&nbsp;&nbsp;&nbsp;THR\n\nDRG&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;23&nbsp;&nbsp;24&nbsp;&nbsp;25&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;\n\nSRP&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;30&nbsp;&nbsp;31&nbsp;&nbsp;32&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;35&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;\n\nTHR&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;38&nbsp;&nbsp;39&nbsp;&nbsp;40&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;44&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45&nbsp;\n\n\n",
          "example": [
            1.1,
            2.4,
            3.8,
            4.2,
            5.5,
            6
          ]
        },
        "covReferenceFrame": {
          "$ref": "#/components/schemas/StateVector_CovReferenceFrame"
        },
        "covMethod": {
          "type": "string",
          "description": "The method used to generate the covariance during the orbit determination (OD) that produced the state vector, or whether an arbitrary, non-calculated default value was used (CALCULATED, DEFAULT).",
          "example": "CALCULATED"
        },
        "eqCov": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "The covariance matrix values represent the lower triangular half of the covariance matrix in terms of equinoctial elements.&nbsp; The size of the covariance matrix is dynamic.&nbsp; The values are outputted in order across each row, i.e.:\n\n1&nbsp;&nbsp; 2&nbsp;&nbsp; 3&nbsp;&nbsp; 4&nbsp;&nbsp; 5\n\n6&nbsp;&nbsp; 7&nbsp;&nbsp; 8&nbsp;&nbsp; 9&nbsp; 10\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n51&nbsp; 52&nbsp; 53&nbsp; 54&nbsp; 55\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n:&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :&nbsp;&nbsp; :\n\n\n\n\nThe ordering of values is as follows:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Af&nbsp;&nbsp; Ag&nbsp;&nbsp; L&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; Chi&nbsp; Psi&nbsp;&nbsp; B&nbsp;&nbsp; BDOT AGOM&nbsp; T&nbsp;&nbsp; C1&nbsp;&nbsp; C2&nbsp; ...\n\nAf&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1\n\nAg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp; 3\n\nL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp;&nbsp; 6\n\nN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 7&nbsp;&nbsp;&nbsp; 8&nbsp;&nbsp;&nbsp; 9&nbsp;&nbsp; 10\n\nChi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 11&nbsp;&nbsp; 12&nbsp;&nbsp; 13&nbsp;&nbsp; 14&nbsp;&nbsp; 15\n\nPsi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16&nbsp;&nbsp; 17&nbsp;&nbsp; 18&nbsp;&nbsp; 19&nbsp;&nbsp; 20&nbsp;&nbsp; 21\n\nB&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22&nbsp;&nbsp; 23&nbsp;&nbsp; 24 &nbsp;&nbsp;25&nbsp;&nbsp; 26&nbsp;&nbsp; 27&nbsp;&nbsp; 28\n\nBDOT&nbsp;&nbsp; 29&nbsp;&nbsp; 30&nbsp;&nbsp; 31&nbsp;&nbsp; 32&nbsp;&nbsp; 33&nbsp;&nbsp; 34&nbsp;&nbsp; 35&nbsp;&nbsp; 36\n\nAGOM&nbsp; 37&nbsp;&nbsp; 38&nbsp;&nbsp; 39&nbsp;&nbsp; 40&nbsp;&nbsp; 41&nbsp;&nbsp; 42&nbsp;&nbsp; 43&nbsp;&nbsp; 44&nbsp;&nbsp; 45\n\nT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 46&nbsp;&nbsp; 47&nbsp;&nbsp; 48&nbsp;&nbsp; 49&nbsp;&nbsp; 50&nbsp;&nbsp; 51&nbsp;&nbsp; 52&nbsp;&nbsp; 53&nbsp;&nbsp; 54&nbsp;&nbsp; 55\n\nC1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 56&nbsp;&nbsp; 57&nbsp;&nbsp; 58&nbsp;&nbsp; 59&nbsp;&nbsp; 60&nbsp;&nbsp; 61&nbsp;&nbsp; 62&nbsp;&nbsp; 63&nbsp;&nbsp; 64&nbsp;&nbsp; 65&nbsp;&nbsp; 66\n\nC2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 67&nbsp;&nbsp; 68&nbsp;&nbsp; 69&nbsp;&nbsp; 70&nbsp;&nbsp; 71&nbsp; &nbsp;72&nbsp;&nbsp; 73&nbsp;&nbsp; 74&nbsp;&nbsp; 75&nbsp;&nbsp; 76&nbsp;&nbsp; 77&nbsp;&nbsp; 78\n\n:\n\n:\n\nwhere C1, C2, etc, are the \"consider parameters\" that may be added to the covariance matrix.&nbsp; The covariance matrix will be as large as the last element/model parameter needed.&nbsp; In other words, if the DC solved for all 6 elements plus AGOM, the covariance matrix will be 9x9 (and the rows for B and BDOT will be all zeros).&nbsp; If the covariance matrix is unavailable, the size will be set to 0x0, and no data will follow.&nbsp; The cov field should contain only the lower left triangle values from top left down to bottom right, in order.",
          "example": [
            1.1,
            2.2
          ]
        },
        "xposAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -1145.688502
        },
        "yposAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": 3020.729572
        },
        "zposAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z position of the target, in kilometers, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": 6165.55187
        },
        "xvelAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -4.270832252
        },
        "yvelAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": 5.27074276
        },
        "zvelAlt1": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt1ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -3.365155181
        },
        "alt1ReferenceFrame": {
          "type": "string",
          "description": "The reference frame of the alternate1 (Alt1) cartesian orbital state.",
          "example": "TEME"
        },
        "xposAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -1456.915926
        },
        "yposAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -2883.540406
        },
        "zposAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z position of the target, in kilometers, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": 6165.55187
        },
        "xvelAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian X velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -1.219814294
        },
        "yvelAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Y velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -6.602080212
        },
        "zvelAlt2": {
          "type": "number",
          "format": "double",
          "description": "Cartesian Z velocity of the target, in kilometers/second, in the specified alt2ReferenceFrame. Alternate reference frames are optional and are intended to allow a data source to provide an equivalent vector in a different cartesian frame than the primary vector.",
          "example": -3.365155181
        },
        "alt2ReferenceFrame": {
          "type": "string",
          "description": "The reference frame of the alternate2 (Alt2) cartesian orbital state.",
          "example": "EFG/TDR"
        },
        "posUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma position uncertainty, in kilometers.",
          "example": 0.333399744452
        },
        "velUnc": {
          "type": "number",
          "format": "double",
          "description": "One sigma velocity uncertainty, in kilometers/second.",
          "example": 0.000004
        },
        "mass": {
          "type": "number",
          "format": "double",
          "description": "The mass of the object, in kilograms.",
          "example": 164.5
        },
        "area": {
          "type": "number",
          "format": "double",
          "description": "The actual area of the object at it's largest cross-section, expressed in meters^2.",
          "example": 5.065
        },
        "solarRadPressCoeff": {
          "type": "number",
          "format": "double",
          "description": "Area-to-mass ratio coefficient for solar radiation pressure.",
          "example": 0.0244394
        },
        "dragCoeff": {
          "type": "number",
          "format": "double",
          "description": "Area-to-mass ratio coefficient for atmospheric ballistic drag (m2/kg).",
          "example": 0.0224391269775
        },
        "dragArea": {
          "type": "number",
          "format": "double",
          "description": "The effective area of the object exposed to atmospheric drag, expressed in meters^2.",
          "example": 4.739
        },
        "revNo": {
          "type": "integer",
          "format": "int32",
          "description": "Epoch revolution number.",
          "example": 7205
        },
        "geopotentialModel": {
          "type": "string",
          "description": "Geopotential model used for this vector (e.g. EGM-96, WGS-84, WGS-72, JGM-2, or GEM-T3), including mm degree zonals, nn degree/order tesserals. E.g. EGM-96 24Z,24T.",
          "example": "EGM-96"
        },
        "dragModel": {
          "type": "string",
          "description": "The Drag Model used for this vector (e.g. HARRIS-PRIESTER, JAC70, JBH09, MSIS90, NONE, etc.).",
          "example": "JAC70"
        },
        "lunarSolar": {
          "type": "boolean",
          "description": "Boolean indicating use of lunar/solar perturbations for this vector.",
          "example": true
        },
        "solarRadPress": {
          "type": "boolean",
          "description": "Boolean indicating use of solar radiation pressure perturbations for this vector.",
          "example": true
        },
        "srpArea": {
          "type": "number",
          "format": "double",
          "description": "The effective area of the object exposed to solar radiation pressure, expressed in meters^2.",
          "example": 4.311
        },
        "solidEarthTides": {
          "type": "boolean",
          "description": "Boolean indicating use of solid earth tide perturbations for this vector.",
          "example": true
        },
        "inTrackThrust": {
          "type": "boolean",
          "description": "Boolean indicating use of in-track thrust perturbations for this vector.",
          "example": true
        },
        "bDot": {
          "type": "number",
          "format": "double",
          "description": "First derivative of drag/ballistic coefficient (m2/kg-s).",
          "example": 1.23
        },
        "edr": {
          "type": "number",
          "format": "double",
          "description": "Model parameter value for energy dissipation rate (EDR) (w/kg).",
          "example": 1.23
        },
        "thrustAccel": {
          "type": "number",
          "format": "double",
          "description": "Model parameter value for thrust acceleration (m/s2).",
          "example": 1.23
        },
        "cmOffset": {
          "type": "number",
          "format": "double",
          "description": "Model parameter value for center of mass offset (m).",
          "example": 1.23
        },
        "lastObStart": {
          "type": "string",
          "format": "date-time",
          "description": "The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
          "example": "2022-11-09T11:20:21.247192Z"
        },
        "lastObEnd": {
          "type": "string",
          "format": "date-time",
          "description": "The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC format with microsecond precision.  For an exact observation time, the firstObTime and lastObTime are the same.",
          "example": "2022-11-09T11:20:21.247192Z"
        },
        "obsAvailable": {
          "type": "integer",
          "format": "int32",
          "description": "The number of observations available for the OD of the object.",
          "example": 376
        },
        "obsUsed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of observations accepted for the OD of the object.",
          "example": 374
        },
        "tracksAvail": {
          "type": "integer",
          "format": "int32",
          "description": "The number of sensor tracks available for the OD of the object.",
          "example": 163
        },
        "tracksUsed": {
          "type": "integer",
          "format": "int32",
          "description": "The number of sensor tracks accepted for the OD of the object.",
          "example": 163
        },
        "recODSpan": {
          "type": "number",
          "format": "double",
          "description": "The recommended OD time span calculated for the object, expressed in days.",
          "example": 3.5
        },
        "actualODSpan": {
          "type": "number",
          "format": "double",
          "description": "The actual time span used for the OD of the object, expressed in days.",
          "example": 3.5
        },
        "residualsAcc": {
          "type": "number",
          "format": "double",
          "description": "The percentage of residuals accepted in the OD of the object.",
          "example": 99.5
        },
        "solarFluxF10": {
          "type": "number",
          "format": "double",
          "description": "F10 (10.7 cm) solar flux value.",
          "example": 1.23
        },
        "solarFluxF10Avg": {
          "type": "number",
          "format": "double",
          "description": "F10 (10.7 cm) solar flux 81-day average value.",
          "example": 1.23
        },
        "solarFluxAPAvg": {
          "type": "number",
          "format": "double",
          "description": "Average solar flux geomagnetic index.",
          "example": 1.23
        },
        "taiUtc": {
          "type": "number",
          "format": "double",
          "description": "TAI (Temps Atomique International) minus UTC (Universal Time Coordinates) offset in seconds.",
          "example": 1.23
        },
        "ut1Utc": {
          "type": "number",
          "format": "double",
          "description": "Universal Time-1 (UT1) minus UTC offset, in seconds.",
          "example": 1.23
        },
        "ut1Rate": {
          "type": "number",
          "format": "double",
          "description": "Rate of change of UT1 (milliseconds/day) - first derivative of ut1Utc.",
          "example": 1.23
        },
        "polarMotionX": {
          "type": "number",
          "format": "double",
          "description": "Polar Wander Motion X (arc seconds).",
          "example": 1.23
        },
        "polarMotionY": {
          "type": "number",
          "format": "double",
          "description": "Polar Wander Motion Y (arc seconds).",
          "example": 1.23
        },
        "iau1980Terms": {
          "type": "integer",
          "format": "int32",
          "description": "Number of terms used in the IAU 1980 nutation model (4, 50, or 106).",
          "example": 4
        },
        "leapSecondTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the next leap second after epoch in ISO 8601 UTC time. If the next leap second is not known, the time of the previous leap second is used.",
          "example": "2021-01-01T01:01:01.123Z"
        },
        "integratorMode": {
          "type": "string",
          "description": "Integrator Mode.",
          "example": "integratorMode"
        },
        "partials": {
          "type": "string",
          "description": "Type of partial derivatives used (ANALYTIC, FULL NUM, or FAST NUM).",
          "example": "ANALYTIC"
        },
        "stepMode": {
          "type": "string",
          "description": "Integrator step mode (AUTO, TIME, or S).",
          "example": "AUTO"
        },
        "fixedStep": {
          "type": "boolean",
          "description": "Boolean indicating use of fixed step size for this vector.",
          "example": true
        },
        "stepSizeSelection": {
          "type": "string",
          "description": "Initial step size selection (AUTO or MANUAL).",
          "example": "AUTO"
        },
        "stepSize": {
          "type": "number",
          "format": "double",
          "description": "Initial integration step size (seconds).",
          "example": 1.23
        },
        "errorControl": {
          "type": "number",
          "format": "double",
          "description": "Integrator error control.",
          "example": 1.23
        },
        "sigmaPosUVW": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Array containing the standard deviation of error in target object position, U, V and W direction respectively (km).",
          "example": [
            1.23,
            4.56
          ]
        },
        "sigmaVelUVW": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Array containing the standard deviation of error in target object velocity, U, V and W direction respectively (km/sec).",
          "example": [
            1.23,
            4.56
          ]
        },
        "rms": {
          "type": "number",
          "format": "double",
          "description": "The Weighted Root Mean Squared (RMS) of the differential correction on the target object that produced this vector.  WRMS is a quality indicator of the state vector update, with a value of 1.00 being optimal.  WRMS applies to Batch Least Squares (BLS) processes.",
          "example": 0.991
        },
        "effectiveFrom": {
          "type": "string",
          "format": "date-time",
          "description": "Start time at which this state vector was the 'current' state vector for its satellite.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "effectiveUntil": {
          "type": "string",
          "format": "date-time",
          "description": "End time at which this state vector was no longer the 'current' state vector for its satellite.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "rawFileURI": {
          "type": "string",
          "description": "Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.",
          "example": "rawFileURI"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "tags": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.",
          "example": [
            "TAG1",
            "TAG2"
          ]
        },
        "algorithm": {
          "type": "string",
          "description": "Optional algorithm used to produce this record.",
          "example": "SAMPLE_ALGORITHM"
        },
        "sourcedData": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Optional array of UDL data (observation) UUIDs used to build this state vector. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).",
          "example": [
            "DATA1",
            "DATA2"
          ]
        },
        "sourcedDataTypes": {
          "items": {
            "type": "string",
            "enum": [
              "EO",
              "RADAR",
              "RF",
              "DOA",
              "ELSET",
              "SV"
            ]
          },
          "type": "array",
          "description": "Optional array of UDL observation data types used to build this state vector (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).",
          "example": [
            "RADAR"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "onOrbit": {
          "$ref": "#/components/schemas/Onorbit"
        },
        "descriptor": {
          "type": "string",
          "description": "Optional source-provided and searchable metadata or descriptor of the data.",
          "example": "descriptor"
        },
        "transactionId": {
          "type": "string",
          "description": "Optional identifier to track a commercial or marketplace transaction executed to produce this data.",
          "example": "transactionId"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        },
        "sourceDL": {
          "type": "string",
          "description": "The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.",
          "readOnly": true,
          "example": "AXE"
        }
      },
      "type": "object",
      "required": [
        "classificationMarking",
        "epoch",
        "source",
        "dataMode"
      ],
      "title": "StateVector",
      "description": "This service provides operations for querying and manipulation of state vectors for OnOrbit objects. State vectors are cartesian vectors of position (r) and velocity (v) that, together with their time (epoch) (t), uniquely determine the trajectory of the orbiting body in space. J2000 is the preferred coordinate frame for all state vector positions/velocities in UDL, but in some cases data may be in another frame depending on the provider and/or datatype. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider."
    },
    "DataMode": {
      "type": "string",
      "enum": [
        "REAL",
        "TEST",
        "SIMULATED",
        "EXERCISE"
      ],
      "title": "DataMode"
    },
    "EOObservation_ReferenceFrame": {
      "type": "string",
      "enum": [
        "J2000",
        "GCRF",
        "ITRF",
        "TEME"
      ],
      "maxLength": 24,
      "title": "EOObservation_ReferenceFrame",
      "description": "The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.",
      "example": "J2000"
    },
    "SenReferenceFrame": {
      "type": "string",
      "enum": [
        "ECR/ECEF",
        "EFG/TDR",
        "GCRF",
        "ITRF",
        "J2000",
        "TEME"
      ],
      "title": "SenReferenceFrame"
    },
    "ProjectionType": {
      "type": "string",
      "enum": [
        "RA_TAN_SIP",
        "DEC_TAN_SIP",
        "RA_TAN",
        "DEC_TAN"
      ],
      "title": "ProjectionType"
    },
    "PixelScaleUnitType": {
      "type": "string",
      "enum": [
        "DEGREES"
      ],
      "title": "PixelScaleUnitType"
    },
    "ObjectType": {
      "type": "string",
      "enum": [
        "DEBRIS",
        "MANNED",
        "PAYLOAD",
        "PLATFORM",
        "ROCKET BODY",
        "UNKNOWN"
      ],
      "title": "ObjectType"
    },
    "Category": {
      "type": "string",
      "enum": [
        "Analyst Satellite",
        "Cataloged Without State",
        "Cislunar",
        "Decayed",
        "Docked",
        "Heliocentric",
        "Hyperbolic",
        "Interplanetary",
        "Lagrangian",
        "Launch Nominal",
        "Lunar",
        "On-Orbit",
        "Unknown"
      ],
      "title": "Category"
    },
    "OnorbitDetails": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "ONORBITDETAILS-ID"
        },
        "idOnOrbit": {
          "type": "string",
          "description": "UUID of the parent Onorbit record.",
          "example": "REF-ONORBIT-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "lastObTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.",
          "example": "2021-01-01T01:01:01.123456Z"
        },
        "vismag": {
          "type": "number",
          "format": "double",
          "description": "Current/latest visual magnitude in M.",
          "example": 10.23
        },
        "vismagMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum visual magnitude in M.",
          "example": 5.23
        },
        "vismagMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum visual magnitude in M.",
          "example": 15.23
        },
        "vismagMean": {
          "type": "number",
          "format": "double",
          "description": "Mean visual magnitude in M.",
          "example": 10.23
        },
        "rcs": {
          "type": "number",
          "format": "double",
          "description": "Current/latest radar cross section in meters squared.",
          "example": 10.23
        },
        "rcsMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum radar cross section in meters squared.",
          "example": 5.23
        },
        "rcsMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum radar cross section in meters squared.",
          "example": 15.23
        },
        "rcsMean": {
          "type": "number",
          "format": "double",
          "description": "Mean radar cross section in meters squared.",
          "example": 10.23
        },
        "bolDeltaV": {
          "type": "number",
          "format": "double",
          "description": "The total beginning of life delta V of the spacecraft, in meters per second.",
          "example": 1000.1
        },
        "maxDeltaV": {
          "type": "number",
          "format": "double",
          "description": "Maximum delta V available for this on-orbit spacecraft, in meters per second.",
          "example": 10.23
        },
        "deltaVUnc": {
          "type": "number",
          "format": "double",
          "description": "The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.",
          "example": 50.1
        },
        "estDeltaVDuration": {
          "type": "number",
          "format": "double",
          "description": "Estimated maximum burn duration for the object, in seconds.",
          "example": 10.23
        },
        "numMission": {
          "type": "integer",
          "format": "int32",
          "description": "The number of distinct missions the spacecraft performs.",
          "example": 2
        },
        "missionTypes": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.",
          "example": [
            "Weather",
            "Space Weather"
          ]
        },
        "busType": {
          "type": "string",
          "description": "Type of the bus on the spacecraft.",
          "example": "A2100"
        },
        "geoSlot": {
          "type": "number",
          "format": "double",
          "description": "GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.",
          "example": 90.23
        },
        "driftRate": {
          "type": "number",
          "format": "double",
          "description": "GEO drift rate, if applicable in degrees per day.",
          "example": 1.23
        },
        "dryMass": {
          "type": "number",
          "format": "double",
          "description": "Spacecraft dry mass (without fuel or disposables) in kilograms.",
          "example": 10.23
        },
        "additionalMass": {
          "type": "number",
          "format": "double",
          "description": "Mass of fuel and disposables at launch time in kilograms.",
          "example": 10.23
        },
        "launchMassMin": {
          "type": "number",
          "format": "double",
          "description": "Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
          "example": 5.23
        },
        "launchMass": {
          "type": "number",
          "format": "double",
          "description": "Nominal mass of spacecraft and fuel at launch time, in kilograms.",
          "example": 10.23
        },
        "launchMassMax": {
          "type": "number",
          "format": "double",
          "description": "Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.",
          "example": 15.23
        },
        "bolFuelMass": {
          "type": "number",
          "format": "double",
          "description": "Spacecraft beginning of life fuel mass, in orbit, in kilograms.",
          "example": 10.23
        },
        "currentMass": {
          "type": "number",
          "format": "double",
          "description": "The estimated total current mass of the spacecraft, in kilograms.",
          "example": 500
        },
        "totalMassUnc": {
          "type": "number",
          "format": "double",
          "description": "The 1-sigma uncertainty of the total spacecraft mass, in kilograms.",
          "example": 50.1
        },
        "solarArrayArea": {
          "type": "number",
          "format": "double",
          "description": "Spacecraft deployed area of solar array in meters squared.",
          "example": 10.23
        },
        "maneuverable": {
          "type": "boolean",
          "description": "Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.",
          "example": false
        },
        "fuelRemaining": {
          "type": "number",
          "format": "double",
          "description": "Estimated remaining fuel for the object in kilograms.",
          "example": 10.23
        },
        "crossSection": {
          "type": "number",
          "format": "double",
          "description": "Average cross sectional area in meters squared.",
          "example": 10.23
        },
        "busCrossSection": {
          "type": "number",
          "format": "double",
          "description": "Average cross sectional area of the bus in meters squared.",
          "example": 10.23
        },
        "maxRadius": {
          "type": "number",
          "format": "double",
          "description": "Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.",
          "example": 10.23
        },
        "colaRadius": {
          "type": "number",
          "format": "double",
          "description": "Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.",
          "example": 10.23
        },
        "adeptRadius": {
          "type": "number",
          "format": "double",
          "description": "The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.",
          "example": 10.23
        },
        "numDeployable": {
          "type": "integer",
          "format": "int32",
          "description": "The number of sub-satellites or deployable objects on the spacecraft.",
          "example": 2
        },
        "depNames": {
          "items": {
            "type": "string"
          },
          "type": "array",
          "description": "Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.",
          "example": [
            "GOES-18A",
            "GOES-18B"
          ]
        },
        "depEstMasses": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
          "example": [
            20,
            21
          ]
        },
        "depMassUncs": {
          "items": {
            "type": "number",
            "format": "double"
          },
          "type": "array",
          "description": "Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.",
          "example": [
            10,
            5
          ]
        },
        "refSource": {
          "type": "string",
          "description": "The reference source, sources, or URL from which the data in this record was obtained.",
          "example": "Wikipedia"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "lastObSource": {
          "type": "string",
          "description": "The name of the source who last provided an observation for this idOnOrbit.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [],
      "title": "OnorbitDetails",
      "description": "Contains details of the OnOrbit object."
    },
    "SensorStats": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "SENSORSTATS-ID"
        },
        "idSensor": {
          "type": "string",
          "description": "Unique ID of the parent sensor.",
          "example": "idSensor"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "lastObTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of last reported observation in ISO 8601 UTC with microsecond precision.",
          "example": "2021-01-01T01:01:01.123456Z"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Read-only time the row was updated in the database, set automatically by the system on update.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        }
      },
      "type": "object",
      "required": [],
      "title": "SensorStats",
      "description": "SensorStats contain statistics on sensors related to observation production such as last reported observation time."
    },
    "Sensorobservationtype": {
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": "3"
        },
        "type": {
          "type": "string",
          "description": "The observation measurement type produced by a sensor.",
          "example": "5"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [],
      "title": "Sensorobservationtype"
    },
    "Sensortype": {
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "Unique identifier of the record, auto-generated by the system.",
          "example": 12344411
        },
        "type": {
          "type": "string",
          "description": "The specific sensor type and/or surveillance capability of this sensor.",
          "example": "Space Borne"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [],
      "title": "Sensortype"
    },
    "MachinaKeyValuePair": {
      "properties": {
        "key": {
          "type": "string",
          "x-machina-entity-field": {
            "isColumnNameInjected": true,
            "columnNameInjectedValue": "pair_key"
          }
        },
        "value": {
          "type": "string",
          "x-machina-entity-field": {
            "isColumnNameInjected": true,
            "columnNameInjectedValue": "pair_value"
          }
        }
      },
      "type": "object",
      "required": [
        "key"
      ],
      "title": "MachinaKeyValuePair",
      "description": "A model defining a key-value-pair that can be persisted in the MACHINA database where the value is a string.",
      "x-machina-entity-class-embeddable": true
    },
    "ReferenceFrameType": {
      "type": "string",
      "enum": [
        "TEME",
        "ITRF",
        "ICRF",
        "LLA",
        "AZEL",
        "RADEC"
      ],
      "title": "ReferenceFrameType"
    },
    "Entity_Type": {
      "type": "string",
      "enum": [
        "AIRCRAFT",
        "BUS",
        "COMM",
        "IR",
        "LASEREMITTER",
        "NAVIGATION",
        "ONORBIT",
        "RFEMITTER",
        "SCIENTIFIC",
        "SENSOR",
        "SITE",
        "VESSEL"
      ],
      "maxLength": 45,
      "minLength": 1,
      "title": "Entity_Type",
      "description": "The type of entity represented by this record (AIRCRAFT, BUS, COMM, IR, LASEREMITTER, NAVIGATION, ONORBIT, RFEMITTER, SCIENTIFIC, SENSOR, SITE, VESSEL).",
      "example": "ONORBIT"
    },
    "Location": {
      "properties": {
        "idLocation": {
          "type": "string",
          "description": "Unique identifier of the location, auto-generated by the system.",
          "example": "LOCATION-ID"
        },
        "classificationMarking": {
          "type": "string",
          "description": "Classification marking of the data in IC/CAPCO Portion-marked format.",
          "example": "U"
        },
        "name": {
          "type": "string",
          "description": "Location name.",
          "example": "Example location"
        },
        "countryCode": {
          "type": "string",
          "description": "The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.",
          "example": "US"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).",
          "example": 45.23
        },
        "lon": {
          "type": "number",
          "format": "double",
          "description": "WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).",
          "example": 179.1
        },
        "altitude": {
          "type": "number",
          "format": "double",
          "description": "Altitude of the location, in kilometers.",
          "example": 10.23
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was created in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "createdBy": {
          "type": "string",
          "description": "Application user who created the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time the row was last updated in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "2018-01-01T16:00:00.123Z"
        },
        "updatedBy": {
          "type": "string",
          "description": "Application user who updated the row in the database, auto-populated by the system.",
          "readOnly": true,
          "example": "some.user"
        },
        "source": {
          "type": "string",
          "description": "Source of the data.",
          "example": "Bluestaq"
        },
        "origin": {
          "type": "string",
          "description": "Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.",
          "example": "THIRD_PARTY_DATASOURCE"
        },
        "dataMode": {
          "$ref": "#/components/schemas/DataMode"
        },
        "origNetwork": {
          "type": "string",
          "description": "The originating source network on which this record was created, auto-populated by the system.",
          "readOnly": true,
          "example": "OPS1"
        }
      },
      "type": "object",
      "required": [],
      "title": "Location",
      "description": "Model representation of a location, which is a specific fixed point on the earth and is used to denote the locations of fixed sensors, operating units, etc."
    },
    "FrameType": {
      "type": "string",
      "enum": [
        "LIGHT",
        "BIAS",
        "DARK",
        "FLAT"
      ],
      "title": "FrameType"
    },
    "StateVector_ReferenceFrame": {
      "type": "string",
      "enum": [
        "J2000",
        "EFG/TDR",
        "ECR/ECEF",
        "TEME",
        "ITRF",
        "GCRF"
      ],
      "maxLength": 24,
      "title": "StateVector_ReferenceFrame",
      "description": "The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.",
      "example": "J2000"
    },
    "StateVector_CovReferenceFrame": {
      "type": "string",
      "enum": [
        "J2000",
        "UVW",
        "EFG/TDR",
        "TEME",
        "GCRF"
      ],
      "maxLength": 24,
      "title": "StateVector_CovReferenceFrame",
      "description": "The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.",
      "example": "J2000"
    }
  }
}